#!/usr/bin/env node
var _pj;
var FORTE,
  SCDICT,
  SCREF,
  TNIMAX,
  TNMAX,
  TNREF,
  card_1,
  card_10,
  card_11,
  card_12,
  card_2,
  card_3,
  card_4,
  card_5,
  card_6,
  card_7,
  card_8,
  card_9,
  decachord,
  diad,
  dodecachord,
  hexachord,
  monad,
  nonachord,
  octachord,
  pentachord,
  septachord,
  t1,
  t10,
  t11,
  t12,
  t13,
  t14,
  t15,
  t16,
  t17,
  t18,
  t19,
  t2,
  t20,
  t21,
  t22,
  t23,
  t24,
  t25,
  t26,
  t27,
  t28,
  t29,
  t3,
  t30,
  t31,
  t32,
  t33,
  t34,
  t35,
  t36,
  t37,
  t38,
  t39,
  t4,
  t40,
  t41,
  t42,
  t43,
  t44,
  t45,
  t46,
  t47,
  t48,
  t49,
  t5,
  t50,
  t6,
  t7,
  t8,
  t9,
  tetrachord,
  trichord,
  undecachord;
function _pj_snippets(container) {
  function in_es6(left, right) {
    if (right instanceof Array || typeof right === 'string') {
      return right.indexOf(left) > -1;
    } else {
      if (
        right instanceof Map ||
        right instanceof Set ||
        right instanceof WeakMap ||
        right instanceof WeakSet
      ) {
        return right.has(left);
      } else {
        return left in right;
      }
    }
  }
  container['in_es6'] = in_es6;
  return container;
}
_pj = {};
_pj_snippets(_pj);
/*
This module stores numerous data lists used in deriving set-class values and other post-tonal
chord representations. All features of this module are made available through
:class:`~music21.chord.Chord` objects. Use of this module directly is thus not necessary.*/
class ChordTableAddress {
  constructor(cardinality, forteClass, inversion, pcOriginal) {
    this.cardinality = cardinality;
    this.forteClass = forteClass;
    this.inversion = inversion;
    this.pcOriginal = pcOriginal;
    // this[0] =
  }
  toArray() {
    return [this.cardinality, this.forteClass, this.inversion, this.pcOriginal];
  }
}
function range(startAt, size) {
  return [...Array(size).keys()].map((i) => i + startAt);
}
// const namedtuple = function(name, fields) {
//   const _fields = fields.split(' ')
//     return function(arr) {
//         var obj = {};
//         for(var i = 0; i < arr.length; i++) {
//             obj[_fields[i]] = arr[i];
//             obj[i] =
//         }

//         return obj;
//     };
// };
// ChordTableAddress = namedtuple('ChordTableAddress', 'cardinality forteClass inversion pcOriginal');

class ChordTablesException extends Error {
  constructor(message) {
    super(message); // (1)
    this.name = 'ChordTablesException'; // (2)
  }
}

t1 = [[0], [0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 11, 11, 11, 11], 0];
monad = [null, t1];
t1 = [[0, 1], [1, 0, 0, 0, 0, 0], [1, 1, 0, 0, 9, 9, 8, 8], 0];
t2 = [[0, 2], [0, 1, 0, 0, 0, 0], [1, 1, 1, 1, 9, 9, 9, 9], 0];
t3 = [[0, 3], [0, 0, 1, 0, 0, 0], [1, 1, 1, 1, 9, 9, 9, 9], 0];
t4 = [[0, 4], [0, 0, 0, 1, 0, 0], [1, 1, 1, 1, 9, 9, 9, 9], 0];
t5 = [[0, 5], [0, 0, 0, 0, 1, 0], [1, 1, 0, 0, 9, 9, 8, 8], 0];
t6 = [[0, 6], [0, 0, 0, 0, 0, 1], [2, 2, 2, 2, 10, 10, 10], 0];
diad = [null, t1, t2, t3, t4, t5, t6];
t1 = [[0, 1, 2], [2, 1, 0, 0, 0, 0], [1, 1, 0, 0, 7, 7, 4, 4], 0];
t2 = [[0, 1, 3], [1, 1, 1, 0, 0, 0], [1, 0, 0, 0, 5, 6, 5, 5], 0];
t3 = [[0, 1, 4], [1, 0, 1, 1, 0, 0], [1, 0, 0, 0, 5, 6, 5, 5], 0];
t4 = [[0, 1, 5], [1, 0, 0, 1, 1, 0], [1, 0, 1, 0, 5, 6, 5, 6], 0];
t5 = [[0, 1, 6], [1, 0, 0, 0, 1, 1], [1, 0, 0, 1, 6, 7, 7, 6], 0];
t6 = [[0, 2, 4], [0, 2, 0, 1, 0, 0], [1, 1, 1, 1, 7, 7, 7, 7], 0];
t7 = [[0, 2, 5], [0, 1, 1, 0, 1, 0], [1, 0, 0, 0, 5, 6, 5, 5], 0];
t8 = [[0, 2, 6], [0, 1, 0, 1, 0, 1], [1, 0, 0, 1, 6, 7, 7, 6], 0];
t9 = [[0, 2, 7], [0, 1, 0, 0, 2, 0], [1, 1, 0, 0, 7, 7, 4, 4], 0];
t10 = [[0, 3, 6], [0, 0, 2, 0, 0, 1], [1, 1, 1, 1, 8, 8, 8, 8], 0];
t11 = [[0, 3, 7], [0, 0, 1, 1, 1, 0], [1, 0, 0, 0, 5, 6, 5, 5], 0];
t12 = [[0, 4, 8], [0, 0, 0, 3, 0, 0], [3, 3, 3, 3, 9, 9, 9, 9], 0];
trichord = [null, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12];
t1 = [[0, 1, 2, 3], [3, 2, 1, 0, 0, 0], [1, 1, 0, 0, 5, 5, 1, 1], 0];
t2 = [[0, 1, 2, 4], [2, 2, 1, 1, 0, 0], [1, 0, 0, 0, 3, 4, 1, 1], 0];
t3 = [[0, 1, 3, 4], [2, 1, 2, 1, 0, 0], [1, 1, 0, 0, 3, 3, 2, 2], 0];
t4 = [[0, 1, 2, 5], [2, 1, 1, 1, 1, 0], [1, 0, 0, 0, 1, 3, 2, 3], 0];
t5 = [[0, 1, 2, 6], [2, 1, 0, 1, 1, 1], [1, 0, 0, 0, 2, 4, 3, 2], 0];
t6 = [[0, 1, 2, 7], [2, 1, 0, 0, 2, 1], [1, 1, 1, 1, 4, 4, 4, 4], 0];
t7 = [[0, 1, 4, 5], [2, 0, 1, 2, 1, 0], [1, 1, 0, 0, 3, 3, 3, 3], 0];
t8 = [[0, 1, 5, 6], [2, 0, 0, 1, 2, 1], [1, 1, 1, 1, 4, 4, 4, 4], 0];
t9 = [[0, 1, 6, 7], [2, 0, 0, 0, 2, 2], [2, 2, 2, 2, 6, 6, 6, 6], 0];
t10 = [[0, 2, 3, 5], [1, 2, 2, 0, 1, 0], [1, 1, 1, 1, 3, 3, 3, 3], 0];
t11 = [[0, 1, 3, 5], [1, 2, 1, 1, 1, 0], [1, 0, 1, 0, 1, 3, 1, 3], 0];
t12 = [[0, 2, 3, 6], [1, 1, 2, 1, 0, 1], [1, 0, 0, 0, 2, 4, 3, 2], 0];
t13 = [[0, 1, 3, 6], [1, 1, 2, 0, 1, 1], [1, 0, 0, 1, 2, 4, 4, 2], 0];
t14 = [[0, 2, 3, 7], [1, 1, 1, 1, 2, 0], [1, 0, 0, 0, 1, 3, 2, 3], 0];
t15 = [[0, 1, 4, 6], [1, 1, 1, 1, 1, 1], [1, 0, 0, 0, 0, 3, 3, 1], 29];
t16 = [[0, 1, 5, 7], [1, 1, 0, 1, 2, 1], [1, 0, 0, 0, 2, 4, 3, 2], 0];
t17 = [[0, 3, 4, 7], [1, 0, 2, 2, 1, 0], [1, 1, 1, 1, 3, 3, 3, 3], 0];
t18 = [[0, 1, 4, 7], [1, 0, 2, 1, 1, 1], [1, 0, 0, 1, 2, 4, 4, 2], 0];
t19 = [[0, 1, 4, 8], [1, 0, 1, 3, 1, 0], [1, 0, 1, 0, 3, 5, 3, 5], 0];
t20 = [[0, 1, 5, 8], [1, 0, 1, 2, 2, 0], [1, 1, 0, 0, 3, 3, 3, 3], 0];
t21 = [[0, 2, 4, 6], [0, 3, 0, 2, 0, 1], [1, 1, 1, 1, 6, 6, 6, 6], 0];
t22 = [[0, 2, 4, 7], [0, 2, 1, 1, 2, 0], [1, 0, 0, 0, 3, 4, 1, 1], 0];
t23 = [[0, 2, 5, 7], [0, 2, 1, 0, 3, 0], [1, 1, 0, 0, 5, 5, 1, 1], 0];
t24 = [[0, 2, 4, 8], [0, 2, 0, 3, 0, 1], [1, 1, 1, 1, 6, 6, 6, 6], 0];
t25 = [[0, 2, 6, 8], [0, 2, 0, 2, 0, 2], [2, 2, 2, 2, 6, 6, 6, 6], 0];
t26 = [[0, 3, 5, 8], [0, 1, 2, 1, 2, 0], [1, 1, 0, 0, 3, 3, 2, 2], 0];
t27 = [[0, 2, 5, 8], [0, 1, 2, 1, 1, 1], [1, 0, 0, 0, 2, 4, 3, 2], 0];
t28 = [[0, 3, 6, 9], [0, 0, 4, 0, 0, 2], [4, 4, 4, 4, 8, 8, 8, 8], 0];
t29 = [[0, 1, 3, 7], [1, 1, 1, 1, 1, 1], [1, 0, 0, 0, 0, 3, 3, 1], 15];
tetrachord = [
  null,
  t1,
  t2,
  t3,
  t4,
  t5,
  t6,
  t7,
  t8,
  t9,
  t10,
  t11,
  t12,
  t13,
  t14,
  t15,
  t16,
  t17,
  t18,
  t19,
  t20,
  t21,
  t22,
  t23,
  t24,
  t25,
  t26,
  t27,
  t28,
  t29,
];
t1 = [[0, 1, 2, 3, 4], [4, 3, 2, 1, 0, 0], [1, 1, 0, 0, 3, 3, 0, 0], 0];
t2 = [[0, 1, 2, 3, 5], [3, 3, 2, 1, 1, 0], [1, 0, 0, 0, 1, 2, 1, 1], 0];
t3 = [[0, 1, 2, 4, 5], [3, 2, 2, 2, 1, 0], [1, 0, 0, 0, 1, 1, 1, 0], 0];
t4 = [[0, 1, 2, 3, 6], [3, 2, 2, 1, 1, 1], [1, 0, 0, 0, 0, 2, 0, 0], 0];
t5 = [[0, 1, 2, 3, 7], [3, 2, 1, 1, 2, 1], [1, 0, 0, 0, 0, 1, 1, 1], 0];
t6 = [[0, 1, 2, 5, 6], [3, 1, 1, 2, 2, 1], [1, 0, 0, 0, 0, 1, 1, 1], 0];
t7 = [[0, 1, 2, 6, 7], [3, 1, 0, 1, 3, 2], [1, 0, 0, 1, 2, 3, 3, 2], 0];
t8 = [[0, 2, 3, 4, 6], [2, 3, 2, 2, 0, 1], [1, 1, 0, 0, 2, 2, 0, 0], 0];
t9 = [[0, 1, 2, 4, 6], [2, 3, 1, 2, 1, 1], [1, 0, 0, 0, 0, 2, 0, 1], 0];
t10 = [[0, 1, 3, 4, 6], [2, 2, 3, 1, 1, 1], [1, 0, 0, 0, 0, 1, 1, 0], 0];
t11 = [[0, 2, 3, 4, 7], [2, 2, 2, 2, 2, 0], [1, 0, 1, 0, 1, 1, 1, 1], 0];
t12 = [[0, 1, 3, 5, 6], [2, 2, 2, 1, 2, 1], [1, 1, 1, 1, 0, 0, 0, 0], 36];
t13 = [[0, 1, 2, 4, 8], [2, 2, 1, 3, 1, 1], [1, 0, 0, 0, 0, 2, 0, 1], 0];
t14 = [[0, 1, 2, 5, 7], [2, 2, 1, 1, 3, 1], [1, 0, 0, 0, 0, 1, 1, 1], 0];
t15 = [[0, 1, 2, 6, 8], [2, 2, 0, 2, 2, 2], [1, 1, 1, 1, 2, 2, 2, 2], 0];
t16 = [[0, 1, 3, 4, 7], [2, 1, 3, 2, 1, 1], [1, 0, 0, 0, 0, 1, 1, 0], 0];
t17 = [[0, 1, 3, 4, 8], [2, 1, 2, 3, 2, 0], [1, 1, 0, 0, 1, 1, 2, 2], 37];
t18 = [[0, 1, 4, 5, 7], [2, 1, 2, 2, 2, 1], [1, 0, 0, 0, 0, 1, 1, 0], 38];
t19 = [[0, 1, 3, 6, 7], [2, 1, 2, 1, 2, 2], [1, 0, 0, 1, 0, 2, 2, 0], 0];
t20 = [[0, 1, 3, 7, 8], [2, 1, 1, 2, 3, 1], [1, 0, 0, 0, 0, 1, 1, 1], 0];
t21 = [[0, 1, 4, 5, 8], [2, 0, 2, 4, 2, 0], [1, 0, 1, 0, 3, 3, 3, 3], 0];
t22 = [[0, 1, 4, 7, 8], [2, 0, 2, 3, 2, 1], [1, 1, 1, 1, 2, 2, 2, 2], 0];
t23 = [[0, 2, 3, 5, 7], [1, 3, 2, 1, 3, 0], [1, 0, 0, 0, 1, 2, 1, 1], 0];
t24 = [[0, 1, 3, 5, 7], [1, 3, 1, 2, 2, 1], [1, 0, 0, 0, 0, 2, 0, 1], 0];
t25 = [[0, 2, 3, 5, 8], [1, 2, 3, 1, 2, 1], [1, 0, 0, 0, 0, 1, 1, 0], 0];
t26 = [[0, 2, 4, 5, 8], [1, 2, 2, 3, 1, 1], [1, 0, 1, 0, 0, 2, 0, 2], 0];
t27 = [[0, 1, 3, 5, 8], [1, 2, 2, 2, 3, 0], [1, 0, 0, 0, 1, 1, 1, 0], 0];
t28 = [[0, 2, 3, 6, 8], [1, 2, 2, 2, 1, 2], [1, 0, 0, 1, 0, 2, 2, 0], 0];
t29 = [[0, 1, 3, 6, 8], [1, 2, 2, 1, 3, 1], [1, 0, 0, 0, 0, 2, 0, 0], 0];
t30 = [[0, 1, 4, 6, 8], [1, 2, 1, 3, 2, 1], [1, 0, 0, 0, 0, 2, 0, 1], 0];
t31 = [[0, 1, 3, 6, 9], [1, 1, 4, 1, 1, 2], [1, 0, 0, 1, 0, 3, 3, 0], 0];
t32 = [[0, 1, 4, 6, 9], [1, 1, 3, 2, 2, 1], [1, 0, 0, 0, 0, 1, 1, 0], 0];
t33 = [[0, 2, 4, 6, 8], [0, 4, 0, 4, 0, 2], [1, 1, 1, 1, 6, 6, 6, 6], 0];
t34 = [[0, 2, 4, 6, 9], [0, 3, 2, 2, 2, 1], [1, 1, 0, 0, 2, 2, 0, 0], 0];
t35 = [[0, 2, 4, 7, 9], [0, 3, 2, 1, 4, 0], [1, 1, 0, 0, 3, 3, 0, 0], 0];
t36 = [[0, 1, 2, 4, 7], [2, 2, 2, 1, 2, 1], [1, 0, 0, 1, 0, 1, 1, 0], 12];
t37 = [[0, 3, 4, 5, 8], [2, 1, 2, 3, 2, 0], [1, 1, 0, 0, 1, 1, 2, 2], 17];
t38 = [[0, 1, 2, 5, 8], [2, 1, 2, 2, 2, 1], [1, 0, 0, 0, 0, 1, 1, 0], 18];
pentachord = [
  null,
  t1,
  t2,
  t3,
  t4,
  t5,
  t6,
  t7,
  t8,
  t9,
  t10,
  t11,
  t12,
  t13,
  t14,
  t15,
  t16,
  t17,
  t18,
  t19,
  t20,
  t21,
  t22,
  t23,
  t24,
  t25,
  t26,
  t27,
  t28,
  t29,
  t30,
  t31,
  t32,
  t33,
  t34,
  t35,
  t36,
  t37,
  t38,
];
t1 = [[0, 1, 2, 3, 4, 5], [5, 4, 3, 2, 1, 0], [1, 1, 0, 0, 1, 1, 0, 0], 0];
t2 = [[0, 1, 2, 3, 4, 6], [4, 4, 3, 2, 1, 1], [1, 0, 0, 0, 0, 1, 0, 0], 0];
t3 = [[0, 1, 2, 3, 5, 6], [4, 3, 3, 2, 2, 1], [1, 0, 0, 0, 0, 0, 0, 0], 36];
t4 = [[0, 1, 2, 4, 5, 6], [4, 3, 2, 3, 2, 1], [1, 1, 0, 0, 0, 0, 0, 0], 37];
t5 = [[0, 1, 2, 3, 6, 7], [4, 2, 2, 2, 3, 2], [1, 0, 0, 0, 0, 1, 0, 0], 0];
t6 = [[0, 1, 2, 5, 6, 7], [4, 2, 1, 2, 4, 2], [1, 1, 0, 0, 0, 0, 1, 1], 38];
t7 = [[0, 1, 2, 6, 7, 8], [4, 2, 0, 2, 4, 3], [2, 2, 2, 2, 2, 2, 2, 2], 0];
t8 = [[0, 2, 3, 4, 5, 7], [3, 4, 3, 2, 3, 0], [1, 1, 1, 1, 1, 1, 1, 1], 0];
t9 = [[0, 1, 2, 3, 5, 7], [3, 4, 2, 2, 3, 1], [1, 0, 1, 0, 0, 1, 0, 1], 0];
t10 = [[0, 1, 3, 4, 5, 7], [3, 3, 3, 3, 2, 1], [1, 0, 0, 0, 0, 0, 0, 0], 39];
t11 = [[0, 1, 2, 4, 5, 7], [3, 3, 3, 2, 3, 1], [1, 0, 0, 0, 0, 0, 1, 0], 40];
t12 = [[0, 1, 2, 4, 6, 7], [3, 3, 2, 2, 3, 2], [1, 0, 0, 1, 0, 0, 0, 0], 41];
t13 = [[0, 1, 3, 4, 6, 7], [3, 2, 4, 2, 2, 2], [1, 1, 0, 0, 0, 0, 0, 0], 42];
t14 = [[0, 1, 3, 4, 5, 8], [3, 2, 3, 4, 3, 0], [1, 0, 1, 0, 1, 0, 1, 0], 0];
t15 = [[0, 1, 2, 4, 5, 8], [3, 2, 3, 4, 2, 1], [1, 0, 0, 0, 0, 1, 0, 0], 0];
t16 = [[0, 1, 4, 5, 6, 8], [3, 2, 2, 4, 3, 1], [1, 0, 1, 0, 0, 1, 0, 1], 0];
t17 = [[0, 1, 2, 4, 7, 8], [3, 2, 2, 3, 3, 2], [1, 0, 0, 1, 0, 0, 0, 0], 43];
t18 = [[0, 1, 2, 5, 7, 8], [3, 2, 2, 2, 4, 2], [1, 0, 0, 0, 0, 1, 0, 0], 0];
t19 = [[0, 1, 3, 4, 7, 8], [3, 1, 3, 4, 3, 1], [1, 0, 0, 0, 0, 0, 1, 0], 44];
t20 = [[0, 1, 4, 5, 8, 9], [3, 0, 3, 6, 3, 0], [3, 3, 3, 3, 3, 3, 3, 3], 0];
t21 = [[0, 2, 3, 4, 6, 8], [2, 4, 2, 4, 1, 2], [1, 0, 0, 0, 0, 1, 0, 0], 0];
t22 = [[0, 1, 2, 4, 6, 8], [2, 4, 1, 4, 2, 2], [1, 0, 1, 0, 0, 1, 0, 1], 0];
t23 = [[0, 2, 3, 5, 6, 8], [2, 3, 4, 2, 2, 2], [1, 1, 1, 1, 0, 0, 0, 0], 45];
t24 = [[0, 1, 3, 4, 6, 8], [2, 3, 3, 3, 3, 1], [1, 0, 0, 0, 0, 0, 0, 0], 46];
t25 = [[0, 1, 3, 5, 6, 8], [2, 3, 3, 2, 4, 1], [1, 0, 0, 0, 0, 0, 0, 0], 47];
t26 = [[0, 1, 3, 5, 7, 8], [2, 3, 2, 3, 4, 1], [1, 1, 0, 0, 0, 0, 0, 0], 48];
t27 = [[0, 1, 3, 4, 6, 9], [2, 2, 5, 2, 2, 2], [1, 0, 0, 1, 0, 1, 1, 0], 0];
t28 = [[0, 1, 3, 5, 6, 9], [2, 2, 4, 3, 2, 2], [1, 1, 1, 1, 0, 0, 0, 0], 49];
t29 = [[0, 1, 3, 6, 8, 9], [2, 2, 4, 2, 3, 2], [1, 1, 0, 0, 0, 0, 0, 0], 50];
t30 = [[0, 1, 3, 6, 7, 9], [2, 2, 4, 2, 2, 3], [2, 0, 0, 2, 0, 2, 2, 0], 0];
t31 = [[0, 1, 3, 5, 8, 9], [2, 2, 3, 4, 3, 1], [1, 0, 0, 0, 0, 1, 0, 0], 0];
t32 = [[0, 2, 4, 5, 7, 9], [1, 4, 3, 2, 5, 0], [1, 1, 0, 0, 1, 1, 0, 0], 0];
t33 = [[0, 2, 3, 5, 7, 9], [1, 4, 3, 2, 4, 1], [1, 0, 0, 0, 0, 1, 0, 0], 0];
t34 = [[0, 1, 3, 5, 7, 9], [1, 4, 2, 4, 2, 2], [1, 0, 0, 0, 0, 1, 0, 0], 0];
t35 = [[0, 2, 4, 6, 8, 10], [0, 6, 0, 6, 0, 3], [6, 6, 6, 6, 6, 6, 6, 6], 0];
t36 = [[0, 1, 2, 3, 4, 7], [4, 3, 3, 2, 2, 1], [1, 0, 0, 0, 0, 0, 0, 0], 3];
t37 = [[0, 1, 2, 3, 4, 8], [4, 3, 2, 3, 2, 1], [1, 1, 0, 0, 0, 0, 0, 0], 4];
t38 = [[0, 1, 2, 3, 7, 8], [4, 2, 1, 2, 4, 2], [1, 1, 0, 0, 0, 0, 1, 1], 6];
t39 = [[0, 2, 3, 4, 5, 8], [3, 3, 3, 3, 2, 1], [1, 0, 0, 0, 0, 0, 0, 0], 10];
t40 = [[0, 1, 2, 3, 5, 8], [3, 3, 3, 2, 3, 1], [1, 0, 0, 0, 0, 0, 1, 0], 11];
t41 = [[0, 1, 2, 3, 6, 8], [3, 3, 2, 2, 3, 2], [1, 0, 0, 1, 0, 0, 0, 0], 12];
t42 = [[0, 1, 2, 3, 6, 9], [3, 2, 4, 2, 2, 2], [1, 1, 0, 0, 0, 0, 0, 0], 13];
t43 = [[0, 1, 2, 5, 6, 8], [3, 2, 2, 3, 3, 2], [1, 0, 0, 1, 0, 0, 0, 0], 17];
t44 = [[0, 1, 2, 5, 6, 9], [3, 1, 3, 4, 3, 1], [1, 0, 0, 0, 0, 0, 1, 0], 19];
t45 = [[0, 2, 3, 4, 6, 9], [2, 3, 4, 2, 2, 2], [1, 1, 1, 1, 0, 0, 0, 0], 23];
t46 = [[0, 1, 2, 4, 6, 9], [2, 3, 3, 3, 3, 1], [1, 0, 0, 0, 0, 0, 0, 0], 24];
t47 = [[0, 1, 2, 4, 7, 9], [2, 3, 3, 2, 4, 1], [1, 0, 0, 0, 0, 0, 0, 0], 25];
t48 = [[0, 1, 2, 5, 7, 9], [2, 3, 2, 3, 4, 1], [1, 1, 0, 0, 0, 0, 0, 0], 26];
t49 = [[0, 1, 3, 4, 7, 9], [2, 2, 4, 3, 2, 2], [1, 1, 1, 1, 0, 0, 0, 0], 28];
t50 = [[0, 1, 4, 6, 7, 9], [2, 2, 4, 2, 3, 2], [1, 1, 0, 0, 0, 0, 0, 0], 29];
hexachord = [
  null,
  t1,
  t2,
  t3,
  t4,
  t5,
  t6,
  t7,
  t8,
  t9,
  t10,
  t11,
  t12,
  t13,
  t14,
  t15,
  t16,
  t17,
  t18,
  t19,
  t20,
  t21,
  t22,
  t23,
  t24,
  t25,
  t26,
  t27,
  t28,
  t29,
  t30,
  t31,
  t32,
  t33,
  t34,
  t35,
  t36,
  t37,
  t38,
  t39,
  t40,
  t41,
  t42,
  t43,
  t44,
  t45,
  t46,
  t47,
  t48,
  t49,
  t50,
];
t1 = [[0, 1, 2, 3, 4, 5, 6], [6, 5, 4, 3, 2, 1], [1, 1, 0, 0, 0, 0, 0, 0], 0];
t2 = [[0, 1, 2, 3, 4, 5, 7], [5, 5, 4, 3, 3, 1], [1, 0, 0, 0, 0, 0, 0, 0], 0];
t3 = [[0, 1, 2, 3, 4, 5, 8], [5, 4, 4, 4, 3, 1], [1, 0, 0, 0, 0, 0, 0, 0], 0];
t4 = [[0, 1, 2, 3, 4, 6, 7], [5, 4, 4, 3, 3, 2], [1, 0, 0, 0, 0, 0, 0, 0], 0];
t5 = [[0, 1, 2, 3, 5, 6, 7], [5, 4, 3, 3, 4, 2], [1, 0, 0, 0, 0, 0, 0, 0], 0];
t6 = [[0, 1, 2, 3, 4, 7, 8], [5, 3, 3, 4, 4, 2], [1, 0, 0, 0, 0, 0, 0, 0], 0];
t7 = [[0, 1, 2, 3, 6, 7, 8], [5, 3, 2, 3, 5, 3], [1, 0, 0, 1, 0, 0, 0, 0], 0];
t8 = [[0, 2, 3, 4, 5, 6, 8], [4, 5, 4, 4, 2, 2], [1, 1, 0, 0, 0, 0, 0, 0], 0];
t9 = [[0, 1, 2, 3, 4, 6, 8], [4, 5, 3, 4, 3, 2], [1, 0, 0, 0, 0, 0, 0, 0], 0];
t10 = [[0, 1, 2, 3, 4, 6, 9], [4, 4, 5, 3, 3, 2], [1, 0, 0, 0, 0, 0, 0, 0], 0];
t11 = [[0, 1, 3, 4, 5, 6, 8], [4, 4, 4, 4, 4, 1], [1, 0, 1, 0, 0, 0, 0, 0], 0];
t12 = [[0, 1, 2, 3, 4, 7, 9], [4, 4, 4, 3, 4, 2], [1, 1, 1, 1, 0, 0, 0, 0], 36];
t13 = [[0, 1, 2, 4, 5, 6, 8], [4, 4, 3, 5, 3, 2], [1, 0, 0, 0, 0, 0, 0, 0], 0];
t14 = [[0, 1, 2, 3, 5, 7, 8], [4, 4, 3, 3, 5, 2], [1, 0, 0, 0, 0, 0, 0, 0], 0];
t15 = [[0, 1, 2, 4, 6, 7, 8], [4, 4, 2, 4, 4, 3], [1, 1, 1, 1, 0, 0, 0, 0], 0];
t16 = [[0, 1, 2, 3, 5, 6, 9], [4, 3, 5, 4, 3, 2], [1, 0, 0, 0, 0, 0, 0, 0], 0];
t17 = [[0, 1, 2, 4, 5, 6, 9], [4, 3, 4, 5, 4, 1], [1, 1, 0, 0, 0, 0, 0, 0], 37];
t18 = [[0, 1, 2, 3, 5, 8, 9], [4, 3, 4, 4, 4, 2], [1, 0, 0, 0, 0, 0, 0, 0], 38];
t19 = [[0, 1, 2, 3, 6, 7, 9], [4, 3, 4, 3, 4, 3], [1, 0, 0, 1, 0, 0, 0, 0], 0];
t20 = [[0, 1, 2, 4, 7, 8, 9], [4, 3, 3, 4, 5, 2], [1, 0, 0, 0, 0, 0, 0, 0], 0];
t21 = [[0, 1, 2, 4, 5, 8, 9], [4, 2, 4, 6, 4, 1], [1, 0, 1, 0, 0, 0, 0, 0], 0];
t22 = [[0, 1, 2, 5, 6, 8, 9], [4, 2, 4, 5, 4, 2], [1, 1, 1, 1, 0, 0, 0, 0], 0];
t23 = [[0, 2, 3, 4, 5, 7, 9], [3, 5, 4, 3, 5, 1], [1, 0, 0, 0, 0, 0, 0, 0], 0];
t24 = [[0, 1, 2, 3, 5, 7, 9], [3, 5, 3, 4, 4, 2], [1, 0, 0, 0, 0, 0, 0, 0], 0];
t25 = [[0, 2, 3, 4, 6, 7, 9], [3, 4, 5, 3, 4, 2], [1, 0, 0, 0, 0, 0, 0, 0], 0];
t26 = [[0, 1, 3, 4, 5, 7, 9], [3, 4, 4, 5, 3, 2], [1, 0, 1, 0, 0, 0, 0, 0], 0];
t27 = [[0, 1, 2, 4, 5, 7, 9], [3, 4, 4, 4, 5, 1], [1, 0, 0, 0, 0, 0, 0, 0], 0];
t28 = [[0, 1, 3, 5, 6, 7, 9], [3, 4, 4, 4, 3, 3], [1, 0, 0, 1, 0, 0, 0, 0], 0];
t29 = [[0, 1, 2, 4, 6, 7, 9], [3, 4, 4, 3, 5, 2], [1, 0, 0, 0, 0, 0, 0, 0], 0];
t30 = [[0, 1, 2, 4, 6, 8, 9], [3, 4, 3, 5, 4, 2], [1, 0, 0, 0, 0, 0, 0, 0], 0];
t31 = [[0, 1, 3, 4, 6, 7, 9], [3, 3, 6, 3, 3, 3], [1, 0, 0, 1, 0, 0, 0, 0], 0];
t32 = [[0, 1, 3, 4, 6, 8, 9], [3, 3, 5, 4, 4, 2], [1, 0, 0, 0, 0, 0, 0, 0], 0];
t33 = [[0, 1, 2, 4, 6, 8, 10], [2, 6, 2, 6, 2, 3], [1, 1, 1, 1, 0, 0, 0, 0], 0];
t34 = [[0, 1, 3, 4, 6, 8, 10], [2, 5, 4, 4, 4, 2], [1, 1, 0, 0, 0, 0, 0, 0], 0];
t35 = [[0, 1, 3, 5, 6, 8, 10], [2, 5, 4, 3, 6, 1], [1, 1, 0, 0, 0, 0, 0, 0], 0];
t36 = [[0, 1, 2, 3, 5, 6, 8], [4, 4, 4, 3, 4, 2], [1, 0, 0, 1, 0, 0, 0, 0], 12];
t37 = [[0, 1, 3, 4, 5, 7, 8], [4, 3, 4, 5, 4, 1], [1, 1, 0, 0, 0, 0, 0, 0], 17];
t38 = [[0, 1, 2, 4, 5, 7, 8], [4, 3, 4, 4, 4, 2], [1, 0, 0, 0, 0, 0, 0, 0], 18];
septachord = [
  null,
  t1,
  t2,
  t3,
  t4,
  t5,
  t6,
  t7,
  t8,
  t9,
  t10,
  t11,
  t12,
  t13,
  t14,
  t15,
  t16,
  t17,
  t18,
  t19,
  t20,
  t21,
  t22,
  t23,
  t24,
  t25,
  t26,
  t27,
  t28,
  t29,
  t30,
  t31,
  t32,
  t33,
  t34,
  t35,
  t36,
  t37,
  t38,
];
t1 = [[0, 1, 2, 3, 4, 5, 6, 7], [7, 6, 5, 4, 4, 2], [1, 1, 0, 0, 0, 0, 0, 0], 0];
t2 = [[0, 1, 2, 3, 4, 5, 6, 8], [6, 6, 5, 5, 4, 2], [1, 0, 0, 0, 0, 0, 0, 0], 0];
t3 = [[0, 1, 2, 3, 4, 5, 6, 9], [6, 5, 6, 5, 4, 2], [1, 1, 0, 0, 0, 0, 0, 0], 0];
t4 = [[0, 1, 2, 3, 4, 5, 7, 8], [6, 5, 5, 5, 5, 2], [1, 0, 0, 0, 0, 0, 0, 0], 0];
t5 = [[0, 1, 2, 3, 4, 6, 7, 8], [6, 5, 4, 5, 5, 3], [1, 0, 0, 0, 0, 0, 0, 0], 0];
t6 = [[0, 1, 2, 3, 5, 6, 7, 8], [6, 5, 4, 4, 6, 3], [1, 1, 1, 1, 0, 0, 0, 0], 0];
t7 = [[0, 1, 2, 3, 4, 5, 8, 9], [6, 4, 5, 6, 5, 2], [1, 1, 0, 0, 0, 0, 0, 0], 0];
t8 = [[0, 1, 2, 3, 4, 7, 8, 9], [6, 4, 4, 5, 6, 3], [1, 1, 1, 1, 0, 0, 0, 0], 0];
t9 = [[0, 1, 2, 3, 6, 7, 8, 9], [6, 4, 4, 4, 6, 4], [2, 2, 2, 2, 0, 0, 0, 0], 0];
t10 = [[0, 2, 3, 4, 5, 6, 7, 9], [5, 6, 6, 4, 5, 2], [1, 1, 1, 1, 0, 0, 0, 0], 0];
t11 = [[0, 1, 2, 3, 4, 5, 7, 9], [5, 6, 5, 5, 5, 2], [1, 0, 1, 0, 0, 0, 0, 0], 0];
t12 = [[0, 1, 3, 4, 5, 6, 7, 9], [5, 5, 6, 5, 4, 3], [1, 0, 0, 0, 0, 0, 0, 0], 0];
t13 = [[0, 1, 2, 3, 4, 6, 7, 9], [5, 5, 6, 4, 5, 3], [1, 0, 0, 1, 0, 0, 0, 0], 0];
t14 = [[0, 1, 2, 4, 5, 6, 7, 9], [5, 5, 5, 5, 6, 2], [1, 0, 0, 0, 0, 0, 0, 0], 0];
t15 = [[0, 1, 2, 3, 4, 6, 8, 9], [5, 5, 5, 5, 5, 3], [1, 0, 0, 0, 0, 0, 0, 0], 29];
t16 = [[0, 1, 2, 3, 5, 7, 8, 9], [5, 5, 4, 5, 6, 3], [1, 0, 0, 0, 0, 0, 0, 0], 0];
t17 = [[0, 1, 3, 4, 5, 6, 8, 9], [5, 4, 6, 6, 5, 2], [1, 1, 1, 1, 0, 0, 0, 0], 0];
t18 = [[0, 1, 2, 3, 5, 6, 8, 9], [5, 4, 6, 5, 5, 3], [1, 0, 0, 1, 0, 0, 0, 0], 0];
t19 = [[0, 1, 2, 4, 5, 6, 8, 9], [5, 4, 5, 7, 5, 2], [1, 0, 1, 0, 0, 0, 0, 0], 0];
t20 = [[0, 1, 2, 4, 5, 7, 8, 9], [5, 4, 5, 6, 6, 2], [1, 1, 0, 0, 0, 0, 0, 0], 0];
t21 = [[0, 1, 2, 3, 4, 6, 8, 10], [4, 7, 4, 6, 4, 3], [1, 1, 1, 1, 0, 0, 0, 0], 0];
t22 = [[0, 1, 2, 3, 5, 6, 8, 10], [4, 6, 5, 5, 6, 2], [1, 0, 0, 0, 0, 0, 0, 0], 0];
t23 = [[0, 1, 2, 3, 5, 7, 8, 10], [4, 6, 5, 4, 7, 2], [1, 1, 0, 0, 0, 0, 0, 0], 0];
t24 = [[0, 1, 2, 4, 5, 6, 8, 10], [4, 6, 4, 7, 4, 3], [1, 1, 1, 1, 0, 0, 0, 0], 0];
t25 = [[0, 1, 2, 4, 6, 7, 8, 10], [4, 6, 4, 6, 4, 4], [2, 2, 2, 2, 0, 0, 0, 0], 0];
t26 = [[0, 1, 2, 4, 5, 7, 9, 10], [4, 5, 6, 5, 6, 2], [1, 1, 0, 0, 0, 0, 0, 0], 0];
t27 = [[0, 1, 2, 4, 5, 7, 8, 10], [4, 5, 6, 5, 5, 3], [1, 0, 0, 0, 0, 0, 0, 0], 0];
t28 = [[0, 1, 3, 4, 6, 7, 9, 10], [4, 4, 8, 4, 4, 4], [4, 4, 4, 4, 0, 0, 0, 0], 0];
t29 = [[0, 1, 2, 3, 5, 6, 7, 9], [5, 5, 5, 5, 5, 3], [1, 0, 0, 0, 0, 0, 0, 0], 15];
octachord = [
  null,
  t1,
  t2,
  t3,
  t4,
  t5,
  t6,
  t7,
  t8,
  t9,
  t10,
  t11,
  t12,
  t13,
  t14,
  t15,
  t16,
  t17,
  t18,
  t19,
  t20,
  t21,
  t22,
  t23,
  t24,
  t25,
  t26,
  t27,
  t28,
  t29,
];
t1 = [[0, 1, 2, 3, 4, 5, 6, 7, 8], [8, 7, 6, 6, 6, 3], [1, 1, 0, 0, 0, 0, 0, 0], 0];
t2 = [[0, 1, 2, 3, 4, 5, 6, 7, 9], [7, 7, 7, 6, 6, 3], [1, 0, 0, 0, 0, 0, 0, 0], 0];
t3 = [[0, 1, 2, 3, 4, 5, 6, 8, 9], [7, 6, 7, 7, 6, 3], [1, 0, 0, 0, 0, 0, 0, 0], 0];
t4 = [[0, 1, 2, 3, 4, 5, 7, 8, 9], [7, 6, 6, 7, 7, 3], [1, 0, 1, 0, 0, 0, 0, 0], 0];
t5 = [[0, 1, 2, 3, 4, 6, 7, 8, 9], [7, 6, 6, 6, 7, 4], [1, 0, 0, 1, 0, 0, 0, 0], 0];
t6 = [[0, 1, 2, 3, 4, 5, 6, 8, 10], [6, 8, 6, 7, 6, 3], [1, 1, 1, 1, 0, 0, 0, 0], 0];
t7 = [[0, 1, 2, 3, 4, 5, 7, 8, 10], [6, 7, 7, 6, 7, 3], [1, 0, 0, 0, 0, 0, 0, 0], 0];
t8 = [[0, 1, 2, 3, 4, 6, 7, 8, 10], [6, 7, 6, 7, 6, 4], [1, 0, 0, 1, 0, 0, 0, 0], 0];
t9 = [[0, 1, 2, 3, 5, 6, 7, 8, 10], [6, 7, 6, 6, 8, 3], [1, 1, 0, 0, 0, 0, 0, 0], 0];
t10 = [[0, 1, 2, 3, 4, 6, 7, 9, 10], [6, 6, 8, 6, 6, 4], [1, 1, 1, 1, 0, 0, 0, 0], 0];
t11 = [[0, 1, 2, 3, 5, 6, 7, 9, 10], [6, 6, 7, 7, 7, 3], [1, 0, 0, 0, 0, 0, 0, 0], 0];
t12 = [[0, 1, 2, 4, 5, 6, 8, 9, 10], [6, 6, 6, 9, 6, 3], [3, 3, 3, 3, 0, 0, 0, 0], 0];
nonachord = [null, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12];
t1 = [[0, 1, 2, 3, 4, 5, 6, 7, 8, 9], [9, 8, 8, 8, 8, 4], [1, 1, 0, 0, 0, 0, 0, 0], 0];
t2 = [[0, 1, 2, 3, 4, 5, 6, 7, 8, 10], [8, 9, 8, 8, 8, 4], [1, 1, 1, 1, 0, 0, 0, 0], 0];
t3 = [[0, 1, 2, 3, 4, 5, 6, 7, 9, 10], [8, 8, 9, 8, 8, 4], [1, 1, 1, 1, 0, 0, 0, 0], 0];
t4 = [[0, 1, 2, 3, 4, 5, 6, 8, 9, 10], [8, 8, 8, 9, 8, 4], [1, 1, 1, 1, 0, 0, 0, 0], 0];
t5 = [[0, 1, 2, 3, 4, 5, 7, 8, 9, 10], [8, 8, 8, 8, 9, 4], [1, 1, 0, 0, 0, 0, 0, 0], 0];
t6 = [[0, 1, 2, 3, 4, 6, 7, 8, 9, 10], [8, 8, 8, 8, 8, 5], [2, 2, 2, 2, 0, 0, 0, 0], 0];
decachord = [null, t1, t2, t3, t4, t5, t6];
t1 = [[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [10, 10, 10, 10, 10, 5], [1, 1, 1, 1, 0, 0, 0, 0], 0];
undecachord = [null, t1];
t1 = [
  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11],
  [12, 12, 12, 12, 12, 6],
  [12, 12, 12, 12, 0, 0, 0, 0],
  0,
];
dodecachord = [null, t1];
FORTE = [
  null,
  monad,
  diad,
  trichord,
  tetrachord,
  pentachord,
  hexachord,
  septachord,
  octachord,
  nonachord,
  decachord,
  undecachord,
  dodecachord,
];
card_1 = { [[1, 0]]: [FORTE[1][1][0], FORTE[1][1][2], FORTE[1][1][1]] };
card_2 = {
  [[1, 0]]: [FORTE[2][1][0], FORTE[2][1][2], FORTE[2][1][1]],
  [[2, 0]]: [FORTE[2][2][0], FORTE[2][2][2], FORTE[2][2][1]],
  [[3, 0]]: [FORTE[2][3][0], FORTE[2][3][2], FORTE[2][3][1]],
  [[4, 0]]: [FORTE[2][4][0], FORTE[2][4][2], FORTE[2][4][1]],
  [[5, 0]]: [FORTE[2][5][0], FORTE[2][5][2], FORTE[2][5][1]],
  [[6, 0]]: [FORTE[2][6][0], FORTE[2][6][2], FORTE[2][6][1]],
};
card_3 = {
  [[1, 0]]: [FORTE[3][1][0], FORTE[3][1][2], FORTE[3][1][1]],
  [[2, 1]]: [FORTE[3][2][0], FORTE[3][2][2], FORTE[3][2][1]],
  [[2, -1]]: [[0, 2, 3], FORTE[3][2][2], FORTE[3][2][1]],
  [[3, 1]]: [FORTE[3][3][0], FORTE[3][3][2], FORTE[3][3][1]],
  [[3, -1]]: [[0, 3, 4], FORTE[3][3][2], FORTE[3][3][1]],
  [[4, 1]]: [FORTE[3][4][0], FORTE[3][4][2], FORTE[3][4][1]],
  [[4, -1]]: [[0, 4, 5], FORTE[3][4][2], FORTE[3][4][1]],
  [[5, 1]]: [FORTE[3][5][0], FORTE[3][5][2], FORTE[3][5][1]],
  [[5, -1]]: [[0, 5, 6], FORTE[3][5][2], FORTE[3][5][1]],
  [[6, 0]]: [FORTE[3][6][0], FORTE[3][6][2], FORTE[3][6][1]],
  [[7, 1]]: [FORTE[3][7][0], FORTE[3][7][2], FORTE[3][7][1]],
  [[7, -1]]: [[0, 3, 5], FORTE[3][7][2], FORTE[3][7][1]],
  [[8, 1]]: [FORTE[3][8][0], FORTE[3][8][2], FORTE[3][8][1]],
  [[8, -1]]: [[0, 4, 6], FORTE[3][8][2], FORTE[3][8][1]],
  [[9, 0]]: [FORTE[3][9][0], FORTE[3][9][2], FORTE[3][9][1]],
  [[10, 0]]: [FORTE[3][10][0], FORTE[3][10][2], FORTE[3][10][1]],
  [[11, 1]]: [FORTE[3][11][0], FORTE[3][11][2], FORTE[3][11][1]],
  [[11, -1]]: [[0, 4, 7], FORTE[3][11][2], FORTE[3][11][1]],
  [[12, 0]]: [FORTE[3][12][0], FORTE[3][12][2], FORTE[3][12][1]],
};
card_4 = {
  [[1, 0]]: [FORTE[4][1][0], FORTE[4][1][2], FORTE[4][1][1]],
  [[2, 1]]: [FORTE[4][2][0], FORTE[4][2][2], FORTE[4][2][1]],
  [[2, -1]]: [[0, 2, 3, 4], FORTE[4][2][2], FORTE[4][2][1]],
  [[3, 0]]: [FORTE[4][3][0], FORTE[4][3][2], FORTE[4][3][1]],
  [[4, 1]]: [FORTE[4][4][0], FORTE[4][4][2], FORTE[4][4][1]],
  [[4, -1]]: [[0, 3, 4, 5], FORTE[4][4][2], FORTE[4][4][1]],
  [[5, 1]]: [FORTE[4][5][0], FORTE[4][5][2], FORTE[4][5][1]],
  [[5, -1]]: [[0, 4, 5, 6], FORTE[4][5][2], FORTE[4][5][1]],
  [[6, 0]]: [FORTE[4][6][0], FORTE[4][6][2], FORTE[4][6][1]],
  [[7, 0]]: [FORTE[4][7][0], FORTE[4][7][2], FORTE[4][7][1]],
  [[8, 0]]: [FORTE[4][8][0], FORTE[4][8][2], FORTE[4][8][1]],
  [[9, 0]]: [FORTE[4][9][0], FORTE[4][9][2], FORTE[4][9][1]],
  [[10, 0]]: [FORTE[4][10][0], FORTE[4][10][2], FORTE[4][10][1]],
  [[11, 1]]: [FORTE[4][11][0], FORTE[4][11][2], FORTE[4][11][1]],
  [[11, -1]]: [[0, 2, 4, 5], FORTE[4][11][2], FORTE[4][11][1]],
  [[12, 1]]: [FORTE[4][12][0], FORTE[4][12][2], FORTE[4][12][1]],
  [[12, -1]]: [[0, 3, 4, 6], FORTE[4][12][2], FORTE[4][12][1]],
  [[13, 1]]: [FORTE[4][13][0], FORTE[4][13][2], FORTE[4][13][1]],
  [[13, -1]]: [[0, 3, 5, 6], FORTE[4][13][2], FORTE[4][13][1]],
  [[14, 1]]: [FORTE[4][14][0], FORTE[4][14][2], FORTE[4][14][1]],
  [[14, -1]]: [[0, 4, 5, 7], FORTE[4][14][2], FORTE[4][14][1]],
  [[15, 1]]: [FORTE[4][15][0], FORTE[4][15][2], FORTE[4][15][1]],
  [[15, -1]]: [[0, 2, 5, 6], FORTE[4][15][2], FORTE[4][15][1]],
  [[16, 1]]: [FORTE[4][16][0], FORTE[4][16][2], FORTE[4][16][1]],
  [[16, -1]]: [[0, 2, 6, 7], FORTE[4][16][2], FORTE[4][16][1]],
  [[17, 0]]: [FORTE[4][17][0], FORTE[4][17][2], FORTE[4][17][1]],
  [[18, 1]]: [FORTE[4][18][0], FORTE[4][18][2], FORTE[4][18][1]],
  [[18, -1]]: [[0, 3, 6, 7], FORTE[4][18][2], FORTE[4][18][1]],
  [[19, 1]]: [FORTE[4][19][0], FORTE[4][19][2], FORTE[4][19][1]],
  [[19, -1]]: [[0, 4, 7, 8], FORTE[4][19][2], FORTE[4][19][1]],
  [[20, 0]]: [FORTE[4][20][0], FORTE[4][20][2], FORTE[4][20][1]],
  [[21, 0]]: [FORTE[4][21][0], FORTE[4][21][2], FORTE[4][21][1]],
  [[22, 1]]: [FORTE[4][22][0], FORTE[4][22][2], FORTE[4][22][1]],
  [[22, -1]]: [[0, 3, 5, 7], FORTE[4][22][2], FORTE[4][22][1]],
  [[23, 0]]: [FORTE[4][23][0], FORTE[4][23][2], FORTE[4][23][1]],
  [[24, 0]]: [FORTE[4][24][0], FORTE[4][24][2], FORTE[4][24][1]],
  [[25, 0]]: [FORTE[4][25][0], FORTE[4][25][2], FORTE[4][25][1]],
  [[26, 0]]: [FORTE[4][26][0], FORTE[4][26][2], FORTE[4][26][1]],
  [[27, 1]]: [FORTE[4][27][0], FORTE[4][27][2], FORTE[4][27][1]],
  [[27, -1]]: [[0, 3, 6, 8], FORTE[4][27][2], FORTE[4][27][1]],
  [[28, 0]]: [FORTE[4][28][0], FORTE[4][28][2], FORTE[4][28][1]],
  [[29, 1]]: [FORTE[4][29][0], FORTE[4][29][2], FORTE[4][29][1]],
  [[29, -1]]: [[0, 4, 6, 7], FORTE[4][29][2], FORTE[4][29][1]],
};
card_5 = {
  [[1, 0]]: [FORTE[5][1][0], FORTE[5][1][2], FORTE[5][1][1]],
  [[2, 1]]: [FORTE[5][2][0], FORTE[5][2][2], FORTE[5][2][1]],
  [[2, -1]]: [[0, 2, 3, 4, 5], FORTE[5][2][2], FORTE[5][2][1]],
  [[3, 1]]: [FORTE[5][3][0], FORTE[5][3][2], FORTE[5][3][1]],
  [[3, -1]]: [[0, 1, 3, 4, 5], FORTE[5][3][2], FORTE[5][3][1]],
  [[4, 1]]: [FORTE[5][4][0], FORTE[5][4][2], FORTE[5][4][1]],
  [[4, -1]]: [[0, 3, 4, 5, 6], FORTE[5][4][2], FORTE[5][4][1]],
  [[5, 1]]: [FORTE[5][5][0], FORTE[5][5][2], FORTE[5][5][1]],
  [[5, -1]]: [[0, 4, 5, 6, 7], FORTE[5][5][2], FORTE[5][5][1]],
  [[6, 1]]: [FORTE[5][6][0], FORTE[5][6][2], FORTE[5][6][1]],
  [[6, -1]]: [[0, 1, 4, 5, 6], FORTE[5][6][2], FORTE[5][6][1]],
  [[7, 1]]: [FORTE[5][7][0], FORTE[5][7][2], FORTE[5][7][1]],
  [[7, -1]]: [[0, 1, 5, 6, 7], FORTE[5][7][2], FORTE[5][7][1]],
  [[8, 0]]: [FORTE[5][8][0], FORTE[5][8][2], FORTE[5][8][1]],
  [[9, 1]]: [FORTE[5][9][0], FORTE[5][9][2], FORTE[5][9][1]],
  [[9, -1]]: [[0, 2, 4, 5, 6], FORTE[5][9][2], FORTE[5][9][1]],
  [[10, 1]]: [FORTE[5][10][0], FORTE[5][10][2], FORTE[5][10][1]],
  [[10, -1]]: [[0, 2, 3, 5, 6], FORTE[5][10][2], FORTE[5][10][1]],
  [[11, 1]]: [FORTE[5][11][0], FORTE[5][11][2], FORTE[5][11][1]],
  [[11, -1]]: [[0, 3, 4, 5, 7], FORTE[5][11][2], FORTE[5][11][1]],
  [[12, 0]]: [FORTE[5][12][0], FORTE[5][12][2], FORTE[5][12][1]],
  [[13, 1]]: [FORTE[5][13][0], FORTE[5][13][2], FORTE[5][13][1]],
  [[13, -1]]: [[0, 4, 6, 7, 8], FORTE[5][13][2], FORTE[5][13][1]],
  [[14, 1]]: [FORTE[5][14][0], FORTE[5][14][2], FORTE[5][14][1]],
  [[14, -1]]: [[0, 2, 5, 6, 7], FORTE[5][14][2], FORTE[5][14][1]],
  [[15, 0]]: [FORTE[5][15][0], FORTE[5][15][2], FORTE[5][15][1]],
  [[16, 1]]: [FORTE[5][16][0], FORTE[5][16][2], FORTE[5][16][1]],
  [[16, -1]]: [[0, 3, 4, 6, 7], FORTE[5][16][2], FORTE[5][16][1]],
  [[17, 0]]: [FORTE[5][17][0], FORTE[5][17][2], FORTE[5][17][1]],
  [[18, 1]]: [FORTE[5][18][0], FORTE[5][18][2], FORTE[5][18][1]],
  [[18, -1]]: [[0, 2, 3, 6, 7], FORTE[5][18][2], FORTE[5][18][1]],
  [[19, 1]]: [FORTE[5][19][0], FORTE[5][19][2], FORTE[5][19][1]],
  [[19, -1]]: [[0, 1, 4, 6, 7], FORTE[5][19][2], FORTE[5][19][1]],
  [[20, 1]]: [FORTE[5][20][0], FORTE[5][20][2], FORTE[5][20][1]],
  [[20, -1]]: [[0, 1, 5, 7, 8], FORTE[5][20][2], FORTE[5][20][1]],
  [[21, 1]]: [FORTE[5][21][0], FORTE[5][21][2], FORTE[5][21][1]],
  [[21, -1]]: [[0, 3, 4, 7, 8], FORTE[5][21][2], FORTE[5][21][1]],
  [[22, 0]]: [FORTE[5][22][0], FORTE[5][22][2], FORTE[5][22][1]],
  [[23, 1]]: [FORTE[5][23][0], FORTE[5][23][2], FORTE[5][23][1]],
  [[23, -1]]: [[0, 2, 4, 5, 7], FORTE[5][23][2], FORTE[5][23][1]],
  [[24, 1]]: [FORTE[5][24][0], FORTE[5][24][2], FORTE[5][24][1]],
  [[24, -1]]: [[0, 2, 4, 6, 7], FORTE[5][24][2], FORTE[5][24][1]],
  [[25, 1]]: [FORTE[5][25][0], FORTE[5][25][2], FORTE[5][25][1]],
  [[25, -1]]: [[0, 3, 5, 6, 8], FORTE[5][25][2], FORTE[5][25][1]],
  [[26, 1]]: [FORTE[5][26][0], FORTE[5][26][2], FORTE[5][26][1]],
  [[26, -1]]: [[0, 3, 4, 6, 8], FORTE[5][26][2], FORTE[5][26][1]],
  [[27, 1]]: [FORTE[5][27][0], FORTE[5][27][2], FORTE[5][27][1]],
  [[27, -1]]: [[0, 3, 5, 7, 8], FORTE[5][27][2], FORTE[5][27][1]],
  [[28, 1]]: [FORTE[5][28][0], FORTE[5][28][2], FORTE[5][28][1]],
  [[28, -1]]: [[0, 2, 5, 6, 8], FORTE[5][28][2], FORTE[5][28][1]],
  [[29, 1]]: [FORTE[5][29][0], FORTE[5][29][2], FORTE[5][29][1]],
  [[29, -1]]: [[0, 2, 5, 7, 8], FORTE[5][29][2], FORTE[5][29][1]],
  [[30, 1]]: [FORTE[5][30][0], FORTE[5][30][2], FORTE[5][30][1]],
  [[30, -1]]: [[0, 2, 4, 7, 8], FORTE[5][30][2], FORTE[5][30][1]],
  [[31, 1]]: [FORTE[5][31][0], FORTE[5][31][2], FORTE[5][31][1]],
  [[31, -1]]: [[0, 3, 6, 8, 9], FORTE[5][31][2], FORTE[5][31][1]],
  [[32, 1]]: [FORTE[5][32][0], FORTE[5][32][2], FORTE[5][32][1]],
  [[32, -1]]: [[0, 3, 5, 8, 9], FORTE[5][32][2], FORTE[5][32][1]],
  [[33, 0]]: [FORTE[5][33][0], FORTE[5][33][2], FORTE[5][33][1]],
  [[34, 0]]: [FORTE[5][34][0], FORTE[5][34][2], FORTE[5][34][1]],
  [[35, 0]]: [FORTE[5][35][0], FORTE[5][35][2], FORTE[5][35][1]],
  [[36, 1]]: [FORTE[5][36][0], FORTE[5][36][2], FORTE[5][36][1]],
  [[36, -1]]: [[0, 3, 5, 6, 7], FORTE[5][36][2], FORTE[5][36][1]],
  [[37, 0]]: [FORTE[5][37][0], FORTE[5][37][2], FORTE[5][37][1]],
  [[38, 1]]: [FORTE[5][38][0], FORTE[5][38][2], FORTE[5][38][1]],
  [[38, -1]]: [[0, 3, 6, 7, 8], FORTE[5][38][2], FORTE[5][38][1]],
};
card_6 = {
  [[1, 0]]: [FORTE[6][1][0], FORTE[6][1][2], FORTE[6][1][1]],
  [[2, 1]]: [FORTE[6][2][0], FORTE[6][2][2], FORTE[6][2][1]],
  [[2, -1]]: [[0, 2, 3, 4, 5, 6], FORTE[6][2][2], FORTE[6][2][1]],
  [[3, 1]]: [FORTE[6][3][0], FORTE[6][3][2], FORTE[6][3][1]],
  [[3, -1]]: [[0, 1, 3, 4, 5, 6], FORTE[6][3][2], FORTE[6][3][1]],
  [[4, 0]]: [FORTE[6][4][0], FORTE[6][4][2], FORTE[6][4][1]],
  [[5, 1]]: [FORTE[6][5][0], FORTE[6][5][2], FORTE[6][5][1]],
  [[5, -1]]: [[0, 1, 4, 5, 6, 7], FORTE[6][5][2], FORTE[6][5][1]],
  [[6, 0]]: [FORTE[6][6][0], FORTE[6][6][2], FORTE[6][6][1]],
  [[7, 0]]: [FORTE[6][7][0], FORTE[6][7][2], FORTE[6][7][1]],
  [[8, 0]]: [FORTE[6][8][0], FORTE[6][8][2], FORTE[6][8][1]],
  [[9, 1]]: [FORTE[6][9][0], FORTE[6][9][2], FORTE[6][9][1]],
  [[9, -1]]: [[0, 2, 4, 5, 6, 7], FORTE[6][9][2], FORTE[6][9][1]],
  [[10, 1]]: [FORTE[6][10][0], FORTE[6][10][2], FORTE[6][10][1]],
  [[10, -1]]: [[0, 2, 3, 4, 6, 7], FORTE[6][10][2], FORTE[6][10][1]],
  [[11, 1]]: [FORTE[6][11][0], FORTE[6][11][2], FORTE[6][11][1]],
  [[11, -1]]: [[0, 2, 3, 5, 6, 7], FORTE[6][11][2], FORTE[6][11][1]],
  [[12, 1]]: [FORTE[6][12][0], FORTE[6][12][2], FORTE[6][12][1]],
  [[12, -1]]: [[0, 1, 3, 5, 6, 7], FORTE[6][12][2], FORTE[6][12][1]],
  [[13, 0]]: [FORTE[6][13][0], FORTE[6][13][2], FORTE[6][13][1]],
  [[14, 1]]: [FORTE[6][14][0], FORTE[6][14][2], FORTE[6][14][1]],
  [[14, -1]]: [[0, 3, 4, 5, 7, 8], FORTE[6][14][2], FORTE[6][14][1]],
  [[15, 1]]: [FORTE[6][15][0], FORTE[6][15][2], FORTE[6][15][1]],
  [[15, -1]]: [[0, 3, 4, 6, 7, 8], FORTE[6][15][2], FORTE[6][15][1]],
  [[16, 1]]: [FORTE[6][16][0], FORTE[6][16][2], FORTE[6][16][1]],
  [[16, -1]]: [[0, 2, 3, 4, 7, 8], FORTE[6][16][2], FORTE[6][16][1]],
  [[17, 1]]: [FORTE[6][17][0], FORTE[6][17][2], FORTE[6][17][1]],
  [[17, -1]]: [[0, 1, 4, 6, 7, 8], FORTE[6][17][2], FORTE[6][17][1]],
  [[18, 1]]: [FORTE[6][18][0], FORTE[6][18][2], FORTE[6][18][1]],
  [[18, -1]]: [[0, 1, 3, 6, 7, 8], FORTE[6][18][2], FORTE[6][18][1]],
  [[19, 1]]: [FORTE[6][19][0], FORTE[6][19][2], FORTE[6][19][1]],
  [[19, -1]]: [[0, 1, 4, 5, 7, 8], FORTE[6][19][2], FORTE[6][19][1]],
  [[20, 0]]: [FORTE[6][20][0], FORTE[6][20][2], FORTE[6][20][1]],
  [[21, 1]]: [FORTE[6][21][0], FORTE[6][21][2], FORTE[6][21][1]],
  [[21, -1]]: [[0, 2, 4, 5, 6, 8], FORTE[6][21][2], FORTE[6][21][1]],
  [[22, 1]]: [FORTE[6][22][0], FORTE[6][22][2], FORTE[6][22][1]],
  [[22, -1]]: [[0, 2, 4, 6, 7, 8], FORTE[6][22][2], FORTE[6][22][1]],
  [[23, 0]]: [FORTE[6][23][0], FORTE[6][23][2], FORTE[6][23][1]],
  [[24, 1]]: [FORTE[6][24][0], FORTE[6][24][2], FORTE[6][24][1]],
  [[24, -1]]: [[0, 2, 4, 5, 7, 8], FORTE[6][24][2], FORTE[6][24][1]],
  [[25, 1]]: [FORTE[6][25][0], FORTE[6][25][2], FORTE[6][25][1]],
  [[25, -1]]: [[0, 2, 3, 5, 7, 8], FORTE[6][25][2], FORTE[6][25][1]],
  [[26, 0]]: [FORTE[6][26][0], FORTE[6][26][2], FORTE[6][26][1]],
  [[27, 1]]: [FORTE[6][27][0], FORTE[6][27][2], FORTE[6][27][1]],
  [[27, -1]]: [[0, 3, 5, 6, 8, 9], FORTE[6][27][2], FORTE[6][27][1]],
  [[28, 0]]: [FORTE[6][28][0], FORTE[6][28][2], FORTE[6][28][1]],
  [[29, 0]]: [FORTE[6][29][0], FORTE[6][29][2], FORTE[6][29][1]],
  [[30, 1]]: [FORTE[6][30][0], FORTE[6][30][2], FORTE[6][30][1]],
  [[30, -1]]: [[0, 2, 3, 6, 8, 9], FORTE[6][30][2], FORTE[6][30][1]],
  [[31, 1]]: [FORTE[6][31][0], FORTE[6][31][2], FORTE[6][31][1]],
  [[31, -1]]: [[0, 1, 4, 6, 8, 9], FORTE[6][31][2], FORTE[6][31][1]],
  [[32, 0]]: [FORTE[6][32][0], FORTE[6][32][2], FORTE[6][32][1]],
  [[33, 1]]: [FORTE[6][33][0], FORTE[6][33][2], FORTE[6][33][1]],
  [[33, -1]]: [[0, 2, 4, 6, 7, 9], FORTE[6][33][2], FORTE[6][33][1]],
  [[34, 1]]: [FORTE[6][34][0], FORTE[6][34][2], FORTE[6][34][1]],
  [[34, -1]]: [[0, 2, 4, 6, 8, 9], FORTE[6][34][2], FORTE[6][34][1]],
  [[35, 0]]: [FORTE[6][35][0], FORTE[6][35][2], FORTE[6][35][1]],
  [[36, 1]]: [FORTE[6][36][0], FORTE[6][36][2], FORTE[6][36][1]],
  [[36, -1]]: [[0, 3, 4, 5, 6, 7], FORTE[6][36][2], FORTE[6][36][1]],
  [[37, 0]]: [FORTE[6][37][0], FORTE[6][37][2], FORTE[6][37][1]],
  [[38, 0]]: [FORTE[6][38][0], FORTE[6][38][2], FORTE[6][38][1]],
  [[39, 1]]: [FORTE[6][39][0], FORTE[6][39][2], FORTE[6][39][1]],
  [[39, -1]]: [[0, 3, 4, 5, 6, 8], FORTE[6][39][2], FORTE[6][39][1]],
  [[40, 1]]: [FORTE[6][40][0], FORTE[6][40][2], FORTE[6][40][1]],
  [[40, -1]]: [[0, 3, 5, 6, 7, 8], FORTE[6][40][2], FORTE[6][40][1]],
  [[41, 1]]: [FORTE[6][41][0], FORTE[6][41][2], FORTE[6][41][1]],
  [[41, -1]]: [[0, 2, 5, 6, 7, 8], FORTE[6][41][2], FORTE[6][41][1]],
  [[42, 0]]: [FORTE[6][42][0], FORTE[6][42][2], FORTE[6][42][1]],
  [[43, 1]]: [FORTE[6][43][0], FORTE[6][43][2], FORTE[6][43][1]],
  [[43, -1]]: [[0, 2, 3, 6, 7, 8], FORTE[6][43][2], FORTE[6][43][1]],
  [[44, 1]]: [FORTE[6][44][0], FORTE[6][44][2], FORTE[6][44][1]],
  [[44, -1]]: [[0, 3, 4, 7, 8, 9], FORTE[6][44][2], FORTE[6][44][1]],
  [[45, 0]]: [FORTE[6][45][0], FORTE[6][45][2], FORTE[6][45][1]],
  [[46, 1]]: [FORTE[6][46][0], FORTE[6][46][2], FORTE[6][46][1]],
  [[46, -1]]: [[0, 3, 5, 7, 8, 9], FORTE[6][46][2], FORTE[6][46][1]],
  [[47, 1]]: [FORTE[6][47][0], FORTE[6][47][2], FORTE[6][47][1]],
  [[47, -1]]: [[0, 2, 5, 7, 8, 9], FORTE[6][47][2], FORTE[6][47][1]],
  [[48, 0]]: [FORTE[6][48][0], FORTE[6][48][2], FORTE[6][48][1]],
  [[49, 0]]: [FORTE[6][49][0], FORTE[6][49][2], FORTE[6][49][1]],
  [[50, 0]]: [FORTE[6][50][0], FORTE[6][50][2], FORTE[6][50][1]],
};
card_7 = {
  [[1, 0]]: [FORTE[7][1][0], FORTE[7][1][2], FORTE[7][1][1]],
  [[2, 1]]: [FORTE[7][2][0], FORTE[7][2][2], FORTE[7][2][1]],
  [[2, -1]]: [[0, 2, 3, 4, 5, 6, 7], FORTE[7][2][2], FORTE[7][2][1]],
  [[3, 1]]: [FORTE[7][3][0], FORTE[7][3][2], FORTE[7][3][1]],
  [[3, -1]]: [[0, 3, 4, 5, 6, 7, 8], FORTE[7][3][2], FORTE[7][3][1]],
  [[4, 1]]: [FORTE[7][4][0], FORTE[7][4][2], FORTE[7][4][1]],
  [[4, -1]]: [[0, 1, 3, 4, 5, 6, 7], FORTE[7][4][2], FORTE[7][4][1]],
  [[5, 1]]: [FORTE[7][5][0], FORTE[7][5][2], FORTE[7][5][1]],
  [[5, -1]]: [[0, 1, 2, 4, 5, 6, 7], FORTE[7][5][2], FORTE[7][5][1]],
  [[6, 1]]: [FORTE[7][6][0], FORTE[7][6][2], FORTE[7][6][1]],
  [[6, -1]]: [[0, 1, 4, 5, 6, 7, 8], FORTE[7][6][2], FORTE[7][6][1]],
  [[7, 1]]: [FORTE[7][7][0], FORTE[7][7][2], FORTE[7][7][1]],
  [[7, -1]]: [[0, 1, 2, 5, 6, 7, 8], FORTE[7][7][2], FORTE[7][7][1]],
  [[8, 0]]: [FORTE[7][8][0], FORTE[7][8][2], FORTE[7][8][1]],
  [[9, 1]]: [FORTE[7][9][0], FORTE[7][9][2], FORTE[7][9][1]],
  [[9, -1]]: [[0, 2, 4, 5, 6, 7, 8], FORTE[7][9][2], FORTE[7][9][1]],
  [[10, 1]]: [FORTE[7][10][0], FORTE[7][10][2], FORTE[7][10][1]],
  [[10, -1]]: [[0, 3, 5, 6, 7, 8, 9], FORTE[7][10][2], FORTE[7][10][1]],
  [[11, 1]]: [FORTE[7][11][0], FORTE[7][11][2], FORTE[7][11][1]],
  [[11, -1]]: [[0, 2, 3, 4, 5, 7, 8], FORTE[7][11][2], FORTE[7][11][1]],
  [[12, 0]]: [FORTE[7][12][0], FORTE[7][12][2], FORTE[7][12][1]],
  [[13, 1]]: [FORTE[7][13][0], FORTE[7][13][2], FORTE[7][13][1]],
  [[13, -1]]: [[0, 2, 3, 4, 6, 7, 8], FORTE[7][13][2], FORTE[7][13][1]],
  [[14, 1]]: [FORTE[7][14][0], FORTE[7][14][2], FORTE[7][14][1]],
  [[14, -1]]: [[0, 1, 3, 5, 6, 7, 8], FORTE[7][14][2], FORTE[7][14][1]],
  [[15, 0]]: [FORTE[7][15][0], FORTE[7][15][2], FORTE[7][15][1]],
  [[16, 1]]: [FORTE[7][16][0], FORTE[7][16][2], FORTE[7][16][1]],
  [[16, -1]]: [[0, 3, 4, 6, 7, 8, 9], FORTE[7][16][2], FORTE[7][16][1]],
  [[17, 0]]: [FORTE[7][17][0], FORTE[7][17][2], FORTE[7][17][1]],
  [[18, 1]]: [FORTE[7][18][0], FORTE[7][18][2], FORTE[7][18][1]],
  [[18, -1]]: [[0, 1, 4, 6, 7, 8, 9], FORTE[7][18][2], FORTE[7][18][1]],
  [[19, 1]]: [FORTE[7][19][0], FORTE[7][19][2], FORTE[7][19][1]],
  [[19, -1]]: [[0, 2, 3, 6, 7, 8, 9], FORTE[7][19][2], FORTE[7][19][1]],
  [[20, 1]]: [FORTE[7][20][0], FORTE[7][20][2], FORTE[7][20][1]],
  [[20, -1]]: [[0, 1, 2, 5, 7, 8, 9], FORTE[7][20][2], FORTE[7][20][1]],
  [[21, 1]]: [FORTE[7][21][0], FORTE[7][21][2], FORTE[7][21][1]],
  [[21, -1]]: [[0, 1, 4, 5, 7, 8, 9], FORTE[7][21][2], FORTE[7][21][1]],
  [[22, 0]]: [FORTE[7][22][0], FORTE[7][22][2], FORTE[7][22][1]],
  [[23, 1]]: [FORTE[7][23][0], FORTE[7][23][2], FORTE[7][23][1]],
  [[23, -1]]: [[0, 2, 4, 5, 6, 7, 9], FORTE[7][23][2], FORTE[7][23][1]],
  [[24, 1]]: [FORTE[7][24][0], FORTE[7][24][2], FORTE[7][24][1]],
  [[24, -1]]: [[0, 2, 4, 6, 7, 8, 9], FORTE[7][24][2], FORTE[7][24][1]],
  [[25, 1]]: [FORTE[7][25][0], FORTE[7][25][2], FORTE[7][25][1]],
  [[25, -1]]: [[0, 2, 3, 5, 6, 7, 9], FORTE[7][25][2], FORTE[7][25][1]],
  [[26, 1]]: [FORTE[7][26][0], FORTE[7][26][2], FORTE[7][26][1]],
  [[26, -1]]: [[0, 2, 4, 5, 6, 8, 9], FORTE[7][26][2], FORTE[7][26][1]],
  [[27, 1]]: [FORTE[7][27][0], FORTE[7][27][2], FORTE[7][27][1]],
  [[27, -1]]: [[0, 2, 4, 5, 7, 8, 9], FORTE[7][27][2], FORTE[7][27][1]],
  [[28, 1]]: [FORTE[7][28][0], FORTE[7][28][2], FORTE[7][28][1]],
  [[28, -1]]: [[0, 2, 3, 4, 6, 8, 9], FORTE[7][28][2], FORTE[7][28][1]],
  [[29, 1]]: [FORTE[7][29][0], FORTE[7][29][2], FORTE[7][29][1]],
  [[29, -1]]: [[0, 2, 3, 5, 7, 8, 9], FORTE[7][29][2], FORTE[7][29][1]],
  [[30, 1]]: [FORTE[7][30][0], FORTE[7][30][2], FORTE[7][30][1]],
  [[30, -1]]: [[0, 1, 3, 5, 7, 8, 9], FORTE[7][30][2], FORTE[7][30][1]],
  [[31, 1]]: [FORTE[7][31][0], FORTE[7][31][2], FORTE[7][31][1]],
  [[31, -1]]: [[0, 2, 3, 5, 6, 8, 9], FORTE[7][31][2], FORTE[7][31][1]],
  [[32, 1]]: [FORTE[7][32][0], FORTE[7][32][2], FORTE[7][32][1]],
  [[32, -1]]: [[0, 1, 3, 5, 6, 8, 9], FORTE[7][32][2], FORTE[7][32][1]],
  [[33, 0]]: [FORTE[7][33][0], FORTE[7][33][2], FORTE[7][33][1]],
  [[34, 0]]: [FORTE[7][34][0], FORTE[7][34][2], FORTE[7][34][1]],
  [[35, 0]]: [FORTE[7][35][0], FORTE[7][35][2], FORTE[7][35][1]],
  [[36, 1]]: [FORTE[7][36][0], FORTE[7][36][2], FORTE[7][36][1]],
  [[36, -1]]: [[0, 2, 3, 5, 6, 7, 8], FORTE[7][36][2], FORTE[7][36][1]],
  [[37, 0]]: [FORTE[7][37][0], FORTE[7][37][2], FORTE[7][37][1]],
  [[38, 1]]: [FORTE[7][38][0], FORTE[7][38][2], FORTE[7][38][1]],
  [[38, -1]]: [[0, 1, 3, 4, 6, 7, 8], FORTE[7][38][2], FORTE[7][38][1]],
};
card_8 = {
  [[1, 0]]: [FORTE[8][1][0], FORTE[8][1][2], FORTE[8][1][1]],
  [[2, 1]]: [FORTE[8][2][0], FORTE[8][2][2], FORTE[8][2][1]],
  [[2, -1]]: [[0, 2, 3, 4, 5, 6, 7, 8], FORTE[8][2][2], FORTE[8][2][1]],
  [[3, 0]]: [FORTE[8][3][0], FORTE[8][3][2], FORTE[8][3][1]],
  [[4, 1]]: [FORTE[8][4][0], FORTE[8][4][2], FORTE[8][4][1]],
  [[4, -1]]: [[0, 1, 3, 4, 5, 6, 7, 8], FORTE[8][4][2], FORTE[8][4][1]],
  [[5, 1]]: [FORTE[8][5][0], FORTE[8][5][2], FORTE[8][5][1]],
  [[5, -1]]: [[0, 1, 2, 4, 5, 6, 7, 8], FORTE[8][5][2], FORTE[8][5][1]],
  [[6, 0]]: [FORTE[8][6][0], FORTE[8][6][2], FORTE[8][6][1]],
  [[7, 0]]: [FORTE[8][7][0], FORTE[8][7][2], FORTE[8][7][1]],
  [[8, 0]]: [FORTE[8][8][0], FORTE[8][8][2], FORTE[8][8][1]],
  [[9, 0]]: [FORTE[8][9][0], FORTE[8][9][2], FORTE[8][9][1]],
  [[10, 0]]: [FORTE[8][10][0], FORTE[8][10][2], FORTE[8][10][1]],
  [[11, 1]]: [FORTE[8][11][0], FORTE[8][11][2], FORTE[8][11][1]],
  [[11, -1]]: [[0, 2, 4, 5, 6, 7, 8, 9], FORTE[8][11][2], FORTE[8][11][1]],
  [[12, 1]]: [FORTE[8][12][0], FORTE[8][12][2], FORTE[8][12][1]],
  [[12, -1]]: [[0, 2, 3, 4, 5, 6, 8, 9], FORTE[8][12][2], FORTE[8][12][1]],
  [[13, 1]]: [FORTE[8][13][0], FORTE[8][13][2], FORTE[8][13][1]],
  [[13, -1]]: [[0, 2, 3, 5, 6, 7, 8, 9], FORTE[8][13][2], FORTE[8][13][1]],
  [[14, 1]]: [FORTE[8][14][0], FORTE[8][14][2], FORTE[8][14][1]],
  [[14, -1]]: [[0, 2, 3, 4, 5, 7, 8, 9], FORTE[8][14][2], FORTE[8][14][1]],
  [[15, 1]]: [FORTE[8][15][0], FORTE[8][15][2], FORTE[8][15][1]],
  [[15, -1]]: [[0, 1, 3, 5, 6, 7, 8, 9], FORTE[8][15][2], FORTE[8][15][1]],
  [[16, 1]]: [FORTE[8][16][0], FORTE[8][16][2], FORTE[8][16][1]],
  [[16, -1]]: [[0, 1, 2, 4, 6, 7, 8, 9], FORTE[8][16][2], FORTE[8][16][1]],
  [[17, 0]]: [FORTE[8][17][0], FORTE[8][17][2], FORTE[8][17][1]],
  [[18, 1]]: [FORTE[8][18][0], FORTE[8][18][2], FORTE[8][18][1]],
  [[18, -1]]: [[0, 1, 3, 4, 6, 7, 8, 9], FORTE[8][18][2], FORTE[8][18][1]],
  [[19, 1]]: [FORTE[8][19][0], FORTE[8][19][2], FORTE[8][19][1]],
  [[19, -1]]: [[0, 1, 3, 4, 5, 7, 8, 9], FORTE[8][19][2], FORTE[8][19][1]],
  [[20, 0]]: [FORTE[8][20][0], FORTE[8][20][2], FORTE[8][20][1]],
  [[21, 0]]: [FORTE[8][21][0], FORTE[8][21][2], FORTE[8][21][1]],
  [[22, 1]]: [FORTE[8][22][0], FORTE[8][22][2], FORTE[8][22][1]],
  [[22, -1]]: [[0, 2, 4, 5, 7, 8, 9, 10], FORTE[8][22][2], FORTE[8][22][1]],
  [[23, 0]]: [FORTE[8][23][0], FORTE[8][23][2], FORTE[8][23][1]],
  [[24, 0]]: [FORTE[8][24][0], FORTE[8][24][2], FORTE[8][24][1]],
  [[25, 0]]: [FORTE[8][25][0], FORTE[8][25][2], FORTE[8][25][1]],
  [[26, 0]]: [FORTE[8][26][0], FORTE[8][26][2], FORTE[8][26][1]],
  [[27, 1]]: [FORTE[8][27][0], FORTE[8][27][2], FORTE[8][27][1]],
  [[27, -1]]: [[0, 2, 3, 5, 6, 8, 9, 10], FORTE[8][27][2], FORTE[8][27][1]],
  [[28, 0]]: [FORTE[8][28][0], FORTE[8][28][2], FORTE[8][28][1]],
  [[29, 1]]: [FORTE[8][29][0], FORTE[8][29][2], FORTE[8][29][1]],
  [[29, -1]]: [[0, 2, 3, 4, 6, 7, 8, 9], FORTE[8][29][2], FORTE[8][29][1]],
};
card_9 = {
  [[1, 0]]: [FORTE[9][1][0], FORTE[9][1][2], FORTE[9][1][1]],
  [[2, 1]]: [FORTE[9][2][0], FORTE[9][2][2], FORTE[9][2][1]],
  [[2, -1]]: [[0, 2, 3, 4, 5, 6, 7, 8, 9], FORTE[9][2][2], FORTE[9][2][1]],
  [[3, 1]]: [FORTE[9][3][0], FORTE[9][3][2], FORTE[9][3][1]],
  [[3, -1]]: [[0, 1, 3, 4, 5, 6, 7, 8, 9], FORTE[9][3][2], FORTE[9][3][1]],
  [[4, 1]]: [FORTE[9][4][0], FORTE[9][4][2], FORTE[9][4][1]],
  [[4, -1]]: [[0, 1, 2, 4, 5, 6, 7, 8, 9], FORTE[9][4][2], FORTE[9][4][1]],
  [[5, 1]]: [FORTE[9][5][0], FORTE[9][5][2], FORTE[9][5][1]],
  [[5, -1]]: [[0, 1, 2, 3, 5, 6, 7, 8, 9], FORTE[9][5][2], FORTE[9][5][1]],
  [[6, 0]]: [FORTE[9][6][0], FORTE[9][6][2], FORTE[9][6][1]],
  [[7, 1]]: [FORTE[9][7][0], FORTE[9][7][2], FORTE[9][7][1]],
  [[7, -1]]: [[0, 2, 3, 5, 6, 7, 8, 9, 10], FORTE[9][7][2], FORTE[9][7][1]],
  [[8, 1]]: [FORTE[9][8][0], FORTE[9][8][2], FORTE[9][8][1]],
  [[8, -1]]: [[0, 2, 3, 4, 6, 7, 8, 9, 10], FORTE[9][8][2], FORTE[9][8][1]],
  [[9, 0]]: [FORTE[9][9][0], FORTE[9][9][2], FORTE[9][9][1]],
  [[10, 0]]: [FORTE[9][10][0], FORTE[9][10][2], FORTE[9][10][1]],
  [[11, 1]]: [FORTE[9][11][0], FORTE[9][11][2], FORTE[9][11][1]],
  [[11, -1]]: [[0, 1, 3, 4, 5, 7, 8, 9, 10], FORTE[9][11][2], FORTE[9][11][1]],
  [[12, 0]]: [FORTE[9][12][0], FORTE[9][12][2], FORTE[9][12][1]],
};
card_10 = {
  [[1, 0]]: [FORTE[10][1][0], FORTE[10][1][2], FORTE[10][1][1]],
  [[2, 0]]: [FORTE[10][2][0], FORTE[10][2][2], FORTE[10][2][1]],
  [[3, 0]]: [FORTE[10][3][0], FORTE[10][3][2], FORTE[10][3][1]],
  [[4, 0]]: [FORTE[10][4][0], FORTE[10][4][2], FORTE[10][4][1]],
  [[5, 0]]: [FORTE[10][5][0], FORTE[10][5][2], FORTE[10][5][1]],
  [[6, 0]]: [FORTE[10][6][0], FORTE[10][6][2], FORTE[10][6][1]],
};
card_11 = { [[1, 0]]: [FORTE[11][1][0], FORTE[11][1][2], FORTE[11][1][1]] };
card_12 = { [[1, 0]]: [FORTE[12][1][0], FORTE[12][1][2], FORTE[12][1][1]] };
SCDICT = {
  [1]: card_1,
  [2]: card_2,
  [3]: card_3,
  [4]: card_4,
  [5]: card_5,
  [6]: card_6,
  [7]: card_7,
  [8]: card_8,
  [9]: card_9,
  [10]: card_10,
  [11]: card_11,
  [12]: card_12,
};
// delete card_1;
// delete card_2;
// delete card_3;
// delete card_4;
// delete card_5;
// delete card_6;
// delete card_7;
// delete card_8;
// delete card_9;
// delete card_10;
// delete card_11;
// delete card_12;
TNMAX = {
  [0]: 1,
  [1]: 1,
  [2]: 6,
  [3]: 19,
  [4]: 43,
  [5]: 66,
  [6]: 80,
  [7]: 66,
  [8]: 43,
  [9]: 19,
  [10]: 6,
  [11]: 1,
  [12]: 1,
};
TNIMAX = {
  [0]: 1,
  [1]: 1,
  [2]: 6,
  [3]: 12,
  [4]: 29,
  [5]: 38,
  [6]: 50,
  [7]: 38,
  [8]: 29,
  [9]: 12,
  [10]: 6,
  [11]: 1,
  [12]: 1,
};
TNREF = {
  [[1, 1, 0]]: 1,
  [[2, 1, 0]]: 1,
  [[2, 2, 0]]: 2,
  [[2, 3, 0]]: 3,
  [[2, 4, 0]]: 4,
  [[2, 5, 0]]: 5,
  [[2, 6, 0]]: 6,
  [[3, 1, 0]]: 1,
  [[3, 2, 1]]: 2,
  [[3, 2, -1]]: 3,
  [[3, 3, 1]]: 4,
  [[3, 3, -1]]: 5,
  [[3, 4, 1]]: 6,
  [[3, 4, -1]]: 7,
  [[3, 5, 1]]: 8,
  [[3, 5, -1]]: 9,
  [[3, 6, 0]]: 10,
  [[3, 7, 1]]: 11,
  [[3, 7, -1]]: 12,
  [[3, 8, 1]]: 13,
  [[3, 8, -1]]: 14,
  [[3, 9, 0]]: 15,
  [[3, 10, 0]]: 16,
  [[3, 11, 1]]: 17,
  [[3, 11, -1]]: 18,
  [[3, 12, 0]]: 19,
  [[4, 1, 0]]: 1,
  [[4, 2, 1]]: 2,
  [[4, 2, -1]]: 3,
  [[4, 3, 0]]: 4,
  [[4, 4, 1]]: 5,
  [[4, 4, -1]]: 6,
  [[4, 5, 1]]: 7,
  [[4, 5, -1]]: 8,
  [[4, 6, 0]]: 9,
  [[4, 7, 0]]: 10,
  [[4, 8, 0]]: 11,
  [[4, 9, 0]]: 12,
  [[4, 10, 0]]: 13,
  [[4, 11, 1]]: 14,
  [[4, 11, -1]]: 15,
  [[4, 12, 1]]: 16,
  [[4, 12, -1]]: 17,
  [[4, 13, 1]]: 18,
  [[4, 13, -1]]: 19,
  [[4, 14, 1]]: 20,
  [[4, 14, -1]]: 21,
  [[4, 15, 1]]: 22,
  [[4, 15, -1]]: 23,
  [[4, 16, 1]]: 24,
  [[4, 16, -1]]: 25,
  [[4, 17, 0]]: 26,
  [[4, 18, 1]]: 27,
  [[4, 18, -1]]: 28,
  [[4, 19, 1]]: 29,
  [[4, 19, -1]]: 30,
  [[4, 20, 0]]: 31,
  [[4, 21, 0]]: 32,
  [[4, 22, 1]]: 33,
  [[4, 22, -1]]: 34,
  [[4, 23, 0]]: 35,
  [[4, 24, 0]]: 36,
  [[4, 25, 0]]: 37,
  [[4, 26, 0]]: 38,
  [[4, 27, 1]]: 39,
  [[4, 27, -1]]: 40,
  [[4, 28, 0]]: 41,
  [[4, 29, 1]]: 42,
  [[4, 29, -1]]: 43,
  [[5, 1, 0]]: 1,
  [[5, 2, 1]]: 2,
  [[5, 2, -1]]: 3,
  [[5, 3, 1]]: 4,
  [[5, 3, -1]]: 5,
  [[5, 4, 1]]: 6,
  [[5, 4, -1]]: 7,
  [[5, 5, 1]]: 8,
  [[5, 5, -1]]: 9,
  [[5, 6, 1]]: 10,
  [[5, 6, -1]]: 11,
  [[5, 7, 1]]: 12,
  [[5, 7, -1]]: 13,
  [[5, 8, 0]]: 14,
  [[5, 9, 1]]: 15,
  [[5, 9, -1]]: 16,
  [[5, 10, 1]]: 17,
  [[5, 10, -1]]: 18,
  [[5, 11, 1]]: 19,
  [[5, 11, -1]]: 20,
  [[5, 12, 0]]: 21,
  [[5, 13, 1]]: 22,
  [[5, 13, -1]]: 23,
  [[5, 14, 1]]: 24,
  [[5, 14, -1]]: 25,
  [[5, 15, 0]]: 26,
  [[5, 16, 1]]: 27,
  [[5, 16, -1]]: 28,
  [[5, 17, 0]]: 29,
  [[5, 18, 1]]: 30,
  [[5, 18, -1]]: 31,
  [[5, 19, 1]]: 32,
  [[5, 19, -1]]: 33,
  [[5, 20, 1]]: 34,
  [[5, 20, -1]]: 35,
  [[5, 21, 1]]: 36,
  [[5, 21, -1]]: 37,
  [[5, 22, 0]]: 38,
  [[5, 23, 1]]: 39,
  [[5, 23, -1]]: 40,
  [[5, 24, 1]]: 41,
  [[5, 24, -1]]: 42,
  [[5, 25, 1]]: 43,
  [[5, 25, -1]]: 44,
  [[5, 26, 1]]: 45,
  [[5, 26, -1]]: 46,
  [[5, 27, 1]]: 47,
  [[5, 27, -1]]: 48,
  [[5, 28, 1]]: 49,
  [[5, 28, -1]]: 50,
  [[5, 29, 1]]: 51,
  [[5, 29, -1]]: 52,
  [[5, 30, 1]]: 53,
  [[5, 30, -1]]: 54,
  [[5, 31, 1]]: 55,
  [[5, 31, -1]]: 56,
  [[5, 32, 1]]: 57,
  [[5, 32, -1]]: 58,
  [[5, 33, 0]]: 59,
  [[5, 34, 0]]: 60,
  [[5, 35, 0]]: 61,
  [[5, 36, 1]]: 62,
  [[5, 36, -1]]: 63,
  [[5, 37, 0]]: 64,
  [[5, 38, 1]]: 65,
  [[5, 38, -1]]: 66,
  [[6, 1, 0]]: 1,
  [[6, 2, 1]]: 2,
  [[6, 2, -1]]: 3,
  [[6, 3, 1]]: 4,
  [[6, 3, -1]]: 5,
  [[6, 4, 0]]: 6,
  [[6, 5, 1]]: 7,
  [[6, 5, -1]]: 8,
  [[6, 6, 0]]: 9,
  [[6, 7, 0]]: 10,
  [[6, 8, 0]]: 11,
  [[6, 9, 1]]: 12,
  [[6, 9, -1]]: 13,
  [[6, 10, 1]]: 14,
  [[6, 10, -1]]: 15,
  [[6, 11, 1]]: 16,
  [[6, 11, -1]]: 17,
  [[6, 12, 1]]: 18,
  [[6, 12, -1]]: 19,
  [[6, 13, 0]]: 20,
  [[6, 14, 1]]: 21,
  [[6, 14, -1]]: 22,
  [[6, 15, 1]]: 23,
  [[6, 15, -1]]: 24,
  [[6, 16, 1]]: 25,
  [[6, 16, -1]]: 26,
  [[6, 17, 1]]: 27,
  [[6, 17, -1]]: 28,
  [[6, 18, 1]]: 29,
  [[6, 18, -1]]: 30,
  [[6, 19, 1]]: 31,
  [[6, 19, -1]]: 32,
  [[6, 20, 0]]: 33,
  [[6, 21, 1]]: 34,
  [[6, 21, -1]]: 35,
  [[6, 22, 1]]: 36,
  [[6, 22, -1]]: 37,
  [[6, 23, 0]]: 38,
  [[6, 24, 1]]: 39,
  [[6, 24, -1]]: 40,
  [[6, 25, 1]]: 41,
  [[6, 25, -1]]: 42,
  [[6, 26, 0]]: 43,
  [[6, 27, 1]]: 44,
  [[6, 27, -1]]: 45,
  [[6, 28, 0]]: 46,
  [[6, 29, 0]]: 47,
  [[6, 30, 1]]: 48,
  [[6, 30, -1]]: 49,
  [[6, 31, 1]]: 50,
  [[6, 31, -1]]: 51,
  [[6, 32, 0]]: 52,
  [[6, 33, 1]]: 53,
  [[6, 33, -1]]: 54,
  [[6, 34, 1]]: 55,
  [[6, 34, -1]]: 56,
  [[6, 35, 0]]: 57,
  [[6, 36, 1]]: 58,
  [[6, 36, -1]]: 59,
  [[6, 37, 0]]: 60,
  [[6, 38, 0]]: 61,
  [[6, 39, 1]]: 62,
  [[6, 39, -1]]: 63,
  [[6, 40, 1]]: 64,
  [[6, 40, -1]]: 65,
  [[6, 41, 1]]: 66,
  [[6, 41, -1]]: 67,
  [[6, 42, 0]]: 68,
  [[6, 43, 1]]: 69,
  [[6, 43, -1]]: 70,
  [[6, 44, 1]]: 71,
  [[6, 44, -1]]: 72,
  [[6, 45, 0]]: 73,
  [[6, 46, 1]]: 74,
  [[6, 46, -1]]: 75,
  [[6, 47, 1]]: 76,
  [[6, 47, -1]]: 77,
  [[6, 48, 0]]: 78,
  [[6, 49, 0]]: 79,
  [[6, 50, 0]]: 80,
  [[7, 1, 0]]: 1,
  [[7, 2, 1]]: 2,
  [[7, 2, -1]]: 3,
  [[7, 3, 1]]: 4,
  [[7, 3, -1]]: 5,
  [[7, 4, 1]]: 6,
  [[7, 4, -1]]: 7,
  [[7, 5, 1]]: 8,
  [[7, 5, -1]]: 9,
  [[7, 6, 1]]: 10,
  [[7, 6, -1]]: 11,
  [[7, 7, 1]]: 12,
  [[7, 7, -1]]: 13,
  [[7, 8, 0]]: 14,
  [[7, 9, 1]]: 15,
  [[7, 9, -1]]: 16,
  [[7, 10, 1]]: 17,
  [[7, 10, -1]]: 18,
  [[7, 11, 1]]: 19,
  [[7, 11, -1]]: 20,
  [[7, 12, 0]]: 21,
  [[7, 13, 1]]: 22,
  [[7, 13, -1]]: 23,
  [[7, 14, 1]]: 24,
  [[7, 14, -1]]: 25,
  [[7, 15, 0]]: 26,
  [[7, 16, 1]]: 27,
  [[7, 16, -1]]: 28,
  [[7, 17, 0]]: 29,
  [[7, 18, 1]]: 30,
  [[7, 18, -1]]: 31,
  [[7, 19, 1]]: 32,
  [[7, 19, -1]]: 33,
  [[7, 20, 1]]: 34,
  [[7, 20, -1]]: 35,
  [[7, 21, 1]]: 36,
  [[7, 21, -1]]: 37,
  [[7, 22, 0]]: 38,
  [[7, 23, 1]]: 39,
  [[7, 23, -1]]: 40,
  [[7, 24, 1]]: 41,
  [[7, 24, -1]]: 42,
  [[7, 25, 1]]: 43,
  [[7, 25, -1]]: 44,
  [[7, 26, 1]]: 45,
  [[7, 26, -1]]: 46,
  [[7, 27, 1]]: 47,
  [[7, 27, -1]]: 48,
  [[7, 28, 1]]: 49,
  [[7, 28, -1]]: 50,
  [[7, 29, 1]]: 51,
  [[7, 29, -1]]: 52,
  [[7, 30, 1]]: 53,
  [[7, 30, -1]]: 54,
  [[7, 31, 1]]: 55,
  [[7, 31, -1]]: 56,
  [[7, 32, 1]]: 57,
  [[7, 32, -1]]: 58,
  [[7, 33, 0]]: 59,
  [[7, 34, 0]]: 60,
  [[7, 35, 0]]: 61,
  [[7, 36, 1]]: 62,
  [[7, 36, -1]]: 63,
  [[7, 37, 0]]: 64,
  [[7, 38, 1]]: 65,
  [[7, 38, -1]]: 66,
  [[8, 1, 0]]: 1,
  [[8, 2, 1]]: 2,
  [[8, 2, -1]]: 3,
  [[8, 3, 0]]: 4,
  [[8, 4, 1]]: 5,
  [[8, 4, -1]]: 6,
  [[8, 5, 1]]: 7,
  [[8, 5, -1]]: 8,
  [[8, 6, 0]]: 9,
  [[8, 7, 0]]: 10,
  [[8, 8, 0]]: 11,
  [[8, 9, 0]]: 12,
  [[8, 10, 0]]: 13,
  [[8, 11, 1]]: 14,
  [[8, 11, -1]]: 15,
  [[8, 12, 1]]: 16,
  [[8, 12, -1]]: 17,
  [[8, 13, 1]]: 18,
  [[8, 13, -1]]: 19,
  [[8, 14, 1]]: 20,
  [[8, 14, -1]]: 21,
  [[8, 15, 1]]: 22,
  [[8, 15, -1]]: 23,
  [[8, 16, 1]]: 24,
  [[8, 16, -1]]: 25,
  [[8, 17, 0]]: 26,
  [[8, 18, 1]]: 27,
  [[8, 18, -1]]: 28,
  [[8, 19, 1]]: 29,
  [[8, 19, -1]]: 30,
  [[8, 20, 0]]: 31,
  [[8, 21, 0]]: 32,
  [[8, 22, 1]]: 33,
  [[8, 22, -1]]: 34,
  [[8, 23, 0]]: 35,
  [[8, 24, 0]]: 36,
  [[8, 25, 0]]: 37,
  [[8, 26, 0]]: 38,
  [[8, 27, 1]]: 39,
  [[8, 27, -1]]: 40,
  [[8, 28, 0]]: 41,
  [[8, 29, 1]]: 42,
  [[8, 29, -1]]: 43,
  [[9, 1, 0]]: 1,
  [[9, 2, 1]]: 2,
  [[9, 2, -1]]: 3,
  [[9, 3, 1]]: 4,
  [[9, 3, -1]]: 5,
  [[9, 4, 1]]: 6,
  [[9, 4, -1]]: 7,
  [[9, 5, 1]]: 8,
  [[9, 5, -1]]: 9,
  [[9, 6, 0]]: 10,
  [[9, 7, 1]]: 11,
  [[9, 7, -1]]: 12,
  [[9, 8, 1]]: 13,
  [[9, 8, -1]]: 14,
  [[9, 9, 0]]: 15,
  [[9, 10, 0]]: 16,
  [[9, 11, 1]]: 17,
  [[9, 11, -1]]: 18,
  [[9, 12, 0]]: 19,
  [[10, 1, 0]]: 1,
  [[10, 2, 0]]: 2,
  [[10, 3, 0]]: 3,
  [[10, 4, 0]]: 4,
  [[10, 5, 0]]: 5,
  [[10, 6, 0]]: 6,
  [[11, 1, 0]]: 1,
  [[12, 1, 0]]: 1,
};
SCREF = {
  [[1, 1, 0]]: { name: ['unison', 'monad', 'singleton'] },
  [[2, 1, 0]]: { name: ['interval class 1', 'minor second', 'm2', 'half step', 'semitone'] },
  [[2, 2, 0]]: { name: ['interval class 2', 'major second', 'M2', 'whole step', 'whole tone'] },
  [[2, 3, 0]]: { name: ['interval class 3', 'minor third', 'm3'] },
  [[2, 4, 0]]: { name: ['interval class 4', 'major third', 'M3'] },
  [[2, 5, 0]]: { name: ['interval class 5', 'perfect fourth', 'P4'] },
  [[2, 6, 0]]: { name: ['tritone', 'diminished fifth', 'augmented fourth'] },
  [[3, 1, 0]]: { name: ['chromatic trimirror'] },
  [[3, 2, 1]]: { name: ['phrygian trichord'] },
  [[3, 2, -1]]: { name: ['minor trichord'] },
  [[3, 3, 1]]: { name: ['major-minor trichord'] },
  [[3, 3, -1]]: { name: ['major-minor trichord'] },
  [[3, 4, 1]]: { name: ['incomplete major-seventh chord'] },
  [[3, 4, -1]]: { name: ['incomplete major-seventh chord'] },
  [[3, 5, 1]]: { name: ['tritone-fourth'] },
  [[3, 5, -1]]: { name: ['tritone-fourth'] },
  [[3, 6, 0]]: { name: ['whole-tone trichord'] },
  [[3, 7, 1]]: { name: ['incomplete minor-seventh chord'] },
  [[3, 7, -1]]: { name: ['incomplete dominant-seventh chord'] },
  [[3, 8, 1]]: { name: ['incomplete dominant-seventh chord', 'Italian augmented sixth chord'] },
  [[3, 8, -1]]: { name: ['incomplete half-diminished seventh chord'] },
  [[3, 9, 0]]: { name: ['quartal trichord'] },
  [[3, 10, 0]]: { name: ['diminished triad'] },
  [[3, 11, 1]]: { name: ['minor triad'] },
  [[3, 11, -1]]: { name: ['major triad'] },
  [[3, 12, 0]]: { name: ['augmented triad', 'equal 3-part octave division'] },
  [[4, 1, 0]]: { name: ['chromatic tetramirror', 'BACH'] },
  [[4, 2, 1]]: { name: ['major-second tetracluster'] },
  [[4, 2, -1]]: { name: ['major-second tetracluster'] },
  [[4, 3, 0]]: { name: ['alternating tetramirror'] },
  [[4, 4, 1]]: { name: ['minor third tetracluster'] },
  [[4, 4, -1]]: { name: ['minor third tetracluster'] },
  [[4, 5, 1]]: { name: ['major third tetracluster'] },
  [[4, 5, -1]]: { name: ['major third tetracluster'] },
  [[4, 6, 0]]: { name: ['perfect fourth tetramirror'] },
  [[4, 7, 0]]: { name: ['Arabian tetramirror'] },
  [[4, 8, 0]]: { name: ['double-fourth tetramirror'] },
  [[4, 9, 0]]: { name: ['double tritone tetramirror'] },
  [[4, 10, 0]]: { name: ['minor tetramirror'] },
  [[4, 11, 1]]: { name: ['phrygian tetrachord'] },
  [[4, 11, -1]]: { name: ['lydian tetrachord', 'major tetrachord'] },
  [[4, 12, 1]]: { name: ['harmonic minor tetrachord'] },
  [[4, 12, -1]]: { name: ['major-third diminished tetrachord'] },
  [[4, 13, 1]]: { name: ['minor-second diminished tetrachord'] },
  [[4, 13, -1]]: { name: ['perfect-fourth diminished tetrachord'] },
  [[4, 14, 1]]: { name: ['major-second minor tetrachord'] },
  [[4, 14, -1]]: { name: ['perfect-fourth major tetrachord'] },
  [[4, 15, 1]]: { name: ['all-interval tetrachord'] },
  [[4, 15, -1]]: { name: ['all-interval tetrachord'] },
  [[4, 16, 1]]: { name: ['minor-second quartal tetrachord'] },
  [[4, 16, -1]]: { name: ['tritone quartal tetrachord'] },
  [[4, 17, 0]]: { name: ['major-minor tetramirror'] },
  [[4, 18, 1]]: { name: ['major-diminished tetrachord'] },
  [[4, 18, -1]]: { name: ['minor-diminished tetrachord'] },
  [[4, 19, 1]]: { name: ['minor-augmented tetrachord'] },
  [[4, 19, -1]]: { name: ['augmented major tetrachord'] },
  [[4, 20, 0]]: { name: ['major seventh chord'] },
  [[4, 21, 0]]: { name: ['whole-tone tetramirror'] },
  [[4, 22, 1]]: { name: ['major-second major tetrachord'] },
  [[4, 22, -1]]: { name: ['perfect-fourth minor tetrachord'] },
  [[4, 23, 0]]: { name: ['quartal tetramirror'] },
  [[4, 24, 0]]: { name: ['augmented seventh chord'] },
  [[4, 25, 0]]: { name: ["Messiaen's truncated mode 6", 'French augmented sixth chord'] },
  [[4, 26, 0]]: { name: ['minor seventh chord'] },
  [[4, 27, 1]]: { name: ['half-diminished seventh chord'] },
  [[4, 27, -1]]: {
    name: [
      'dominant seventh chord',
      'major minor seventh chord',
      'German augmented sixth chord',
      'Swiss augmented sixth chord',
    ],
  },
  [[4, 28, 0]]: { name: ['diminished seventh chord', 'equal 4-part octave division'] },
  [[4, 29, 1]]: { name: ['all-interval tetrachord'] },
  [[4, 29, -1]]: { name: ['all-interval tetrachord'] },
  [[5, 1, 0]]: { name: ['chromatic pentamirror'] },
  [[5, 2, 1]]: { name: ['major-second pentacluster'] },
  [[5, 2, -1]]: { name: ['major-second pentacluster'] },
  [[5, 3, 1]]: { name: ['minor-second major pentachord'] },
  [[5, 3, -1]]: { name: ['Spanish pentacluster'] },
  [[5, 4, 1]]: { name: ['blues pentacluster'] },
  [[5, 4, -1]]: { name: ['minor-third pentacluster'] },
  [[5, 5, 1]]: { name: ['major-third pentacluster'] },
  [[5, 5, -1]]: { name: ['major-third pentacluster'] },
  [[5, 6, 1]]: { name: ['Asian pentacluster', 'quasi raga Megharanji'] },
  [[5, 6, -1]]: { name: ['Asian pentacluster'] },
  [[5, 7, 1]]: { name: ['double pentacluster', 'quasi raga Nabhomani '] },
  [[5, 7, -1]]: { name: ['double pentacluster'] },
  [[5, 8, 0]]: { name: ['tritone-symmetric pentamirror'] },
  [[5, 9, 1]]: { name: ['tritone-expanding pentachord'] },
  [[5, 9, -1]]: { name: ['tritone-contracting pentachord'] },
  [[5, 10, 1]]: { name: ['alternating pentachord'] },
  [[5, 10, -1]]: { name: ['alternating pentachord'] },
  [[5, 11, 1]]: { name: ['center-cluster pentachord'] },
  [[5, 11, -1]]: { name: ['center-cluster pentachord'] },
  [[5, 12, 0]]: { name: ['locrian pentachord'] },
  [[5, 13, 1]]: { name: ['augmented pentacluster'] },
  [[5, 13, -1]]: { name: ['augmented pentacluster'] },
  [[5, 14, 1]]: { name: ['double-seconds triple-fourth pentachord'] },
  [[5, 14, -1]]: { name: ['double-seconds triple-fourth pentachord'] },
  [[5, 15, 0]]: { name: ['asymmetric pentamirror'] },
  [[5, 16, 1]]: { name: ['major-minor-diminished pentachord'] },
  [[5, 16, -1]]: { name: ['major-minor diminished pentachord'] },
  [[5, 17, 0]]: { name: ['minor-major ninth chord'] },
  [[5, 18, 1]]: { name: ['Roma (Gypsy) pentachord'] },
  [[5, 18, -1]]: { name: ['Roma (Gypsy) pentachord'] },
  [[5, 19, 1]]: { name: ['Javanese pentachord'] },
  [[5, 19, -1]]: { name: ['Balinese pentachord'] },
  [[5, 20, 1]]: { name: ['Balinese Pelog pentatonic', 'quasi raga Bhupala', 'quasi raga Bibhas'] },
  [[5, 20, -1]]: { name: ['Hirajoshi pentatonic', 'Iwato', 'Sakura', 'quasi raga Saveri'] },
  [[5, 21, 1]]: {
    name: ['major-augmented ninth chord', 'Syrian pentatonic', 'quasi raga Megharanji'],
  },
  [[5, 21, -1]]: { name: ['Lebanese pentachord', 'augmented-minor chord'] },
  [[5, 22, 0]]: { name: ['Persian pentamirror', 'quasi raga Ramkali'] },
  [[5, 23, 1]]: { name: ['dorian pentachord', 'minor pentachord'] },
  [[5, 23, -1]]: { name: ['major pentachord'] },
  [[5, 24, 1]]: { name: ['phrygian pentachord'] },
  [[5, 24, -1]]: { name: ['lydian pentachord'] },
  [[5, 25, 1]]: { name: ['diminished-major ninth chord'] },
  [[5, 25, -1]]: { name: ['minor-diminished ninth chord'] },
  [[5, 26, 1]]: { name: ['diminished-augmented ninth chord'] },
  [[5, 26, -1]]: { name: ['augmented-diminished ninth chord'] },
  [[5, 27, 1]]: { name: ['major-ninth chord'] },
  [[5, 27, -1]]: { name: ['minor-ninth chord'] },
  [[5, 28, 1]]: { name: ['augmented-sixth pentachord'] },
  [[5, 28, -1]]: { name: ['Javanese pentatonic', 'augmented-sixth pentachord'] },
  [[5, 29, 1]]: { name: ['Kumoi pentachord'] },
  [[5, 29, -1]]: { name: ['Kumoi pentachord'] },
  [[5, 30, 1]]: { name: ['enigmatic pentachord'] },
  [[5, 30, -1]]: { name: ['enigmatic pentachord', 'altered pentatonic'] },
  [[5, 31, 1]]: { name: ['diminished minor-ninth chord'] },
  [[5, 31, -1]]: { name: ['flat-ninth pentachord', 'quasi raga Ranjaniraga'] },
  [[5, 32, 1]]: { name: ['Neapolitan pentachord'] },
  [[5, 32, -1]]: { name: ['Neapolitan pentachord'] },
  [[5, 33, 0]]: { name: ['whole-tone pentachord'] },
  [[5, 34, 0]]: {
    name: ['dominant-ninth', 'major-minor', 'Prometheus pentamirror', 'dominant pentatonic'],
  },
  [[5, 35, 0]]: {
    name: [
      'major pentatonic',
      'black-key scale',
      'blues pentatonic',
      'slendro',
      'quartal pentamirror',
    ],
  },
  [[5, 36, 1]]: { name: ['major-seventh pentacluster'] },
  [[5, 36, -1]]: { name: ['minor-seventh pentacluster'] },
  [[5, 37, 0]]: { name: ['center-cluster pentamirror'] },
  [[5, 38, 1]]: { name: ['diminished pentacluster'] },
  [[5, 38, -1]]: { name: ['diminished pentacluster'] },
  [[6, 1, 0]]: {
    name: [
      'A all combinatorial (P6, I11, RI5, RI11)',
      'chromatic hexamirror',
      'first-order all-combinatorial',
    ],
  },
  [[6, 2, 1]]: { name: ['combinatorial I (I11)'] },
  [[6, 2, -1]]: { name: ['combinatorial I (I1)'] },
  [[6, 3, 1]]: {},
  [[6, 3, -1]]: {},
  [[6, 4, 0]]: { name: ['combinatorial RI (RI6)'] },
  [[6, 5, 1]]: { name: ['combinatorial I (I11)'] },
  [[6, 5, -1]]: { name: ['combinatorial I (I3)'] },
  [[6, 6, 0]]: { name: ['double cluster hexamirror'] },
  [[6, 7, 0]]: {
    name: [
      'B all combinatorial (P3, P9, I5, R6, R12, R8)',
      "Messiaen's mode 5",
      'second-order all combinatorial',
    ],
  },
  [[6, 8, 0]]: { name: ['D all combinatorial (P6, I1, RI7)'] },
  [[6, 9, 1]]: { name: ['combinatorial I (I11)'] },
  [[6, 9, -1]]: { name: ['combinatorial I (I3)'] },
  [[6, 10, 1]]: {},
  [[6, 10, -1]]: {},
  [[6, 11, 1]]: {},
  [[6, 11, -1]]: {},
  [[6, 12, 1]]: {},
  [[6, 12, -1]]: {},
  [[6, 13, 0]]: { name: ['alternating hexamirror', 'combinatorial I (I7)'] },
  [[6, 14, 1]]: { name: ['combinatorial P (P6)'] },
  [[6, 14, -1]]: { name: ['combinatorial P (P6)'] },
  [[6, 15, 1]]: { name: ['combinatorial I (I11)'] },
  [[6, 15, -1]]: { name: ['combinatorial I (I5)'] },
  [[6, 16, 1]]: { name: ['combinatorial I (I3)'] },
  [[6, 16, -1]]: { name: ['combinatorial I (I1)', 'quasi raga Megha'] },
  [[6, 17, 1]]: { name: ['all tri-chord hexachord'] },
  [[6, 17, -1]]: { name: ['all tri-chord hexachord (inverted form)'] },
  [[6, 18, 1]]: { name: ['combinatorial I (I11)'] },
  [[6, 18, -1]]: { name: ['combinatorial I (I5)'] },
  [[6, 19, 1]]: {},
  [[6, 19, -1]]: {},
  [[6, 20, 0]]: {
    name: [
      'E all combinatorial (P2, P6, P10, I3, I7, R4, R8, RI1, RI5, RI9)',
      "Messiaen's truncated mode 3",
      'Genus tertium',
      'third-order all combinatorial',
    ],
  },
  [[6, 21, 1]]: { name: ['combinatorial I (I1)'] },
  [[6, 21, -1]]: { name: ['combinatorial I (I3)'] },
  [[6, 22, 1]]: { name: ['combinatorial I (I11)'] },
  [[6, 22, -1]]: { name: ['combinatorial I (I5)'] },
  [[6, 23, 0]]: { name: ['combinatorial RI (RI8)', 'super-locrian hexamirror'] },
  [[6, 24, 1]]: {},
  [[6, 24, -1]]: { name: ['melodic-minor hexachord'] },
  [[6, 25, 1]]: { name: ['locrian hexachord'] },
  [[6, 25, -1]]: { name: ['minor hexachord'] },
  [[6, 26, 0]]: { name: ['phrygian hexamirror', 'combinatorial RI (RI8)'] },
  [[6, 27, 1]]: { name: ['combinatorial I (I11)'] },
  [[6, 27, -1]]: { name: ['combinatorial I (I1)', 'pyramid hexachord'] },
  [[6, 28, 0]]: { name: ['double-phrygian hexachord', 'combinatorial RI (RI6)'] },
  [[6, 29, 0]]: { name: ['combinatorial RI (RI9)'] },
  [[6, 30, 1]]: {
    name: [
      "Messiaen's truncated mode 2",
      'minor-bitonal hexachord',
      'combinatorial R (R6)',
      'combinatorial I (I1, I7)',
    ],
  },
  [[6, 30, -1]]: {
    name: [
      "Stravinsky's Petrushka-chord",
      "Messiaen's truncated mode 2",
      'major-bitonal hexachord',
      'combinatorial R (R6)',
      'combinatorial I (I1, I7)',
    ],
  },
  [[6, 31, 1]]: { name: ['combinatorial I (I7)'] },
  [[6, 31, -1]]: { name: ['combinatorial I (I11)'] },
  [[6, 32, 0]]: {
    name: [
      'C all combinatorial (P6, I3, RI9)',
      'Guidon/Arezzo',
      'Arezzo major diatonic',
      'major hexamirror',
      'quartal hexamirror',
      'first-order all combinatorial',
    ],
  },
  [[6, 33, 1]]: { name: ['dorian hexachord', 'combinatorial I (I6)'] },
  [[6, 33, -1]]: { name: ['dominant-eleventh', 'lydian hexachord', 'combinatorial I (I1)'] },
  [[6, 34, 1]]: {
    name: ["Scriabin's Mystic-chord", 'Prometheus hexachord', 'combinatorial I (I11)'],
  },
  [[6, 34, -1]]: { name: ['augmented-eleventh', 'harmonic hexachord', 'combinatorial I (I7)'] },
  [[6, 35, 0]]: {
    name: [
      'whole tone scale',
      '6 equal part division',
      'F all-combinatorial (P1, P3, P5, P7, P9, P11, I1, I3, I5, I7, ' +
        'I9, I11, R2, R4, R6, R8, R10, RI2, RI4, RI6, RI8, RI10)',
      "Messiaen's mode 1",
      'sixth-order all combinatorial',
    ],
  },
  [[6, 36, 1]]: {},
  [[6, 36, -1]]: {},
  [[6, 37, 0]]: { name: ['combinatorial RI (RI4)'] },
  [[6, 38, 0]]: { name: ['combinatorial RI (RI3)'] },
  [[6, 39, 1]]: {},
  [[6, 39, -1]]: {},
  [[6, 40, 1]]: {},
  [[6, 40, -1]]: {},
  [[6, 41, 1]]: {},
  [[6, 41, -1]]: {},
  [[6, 42, 0]]: { name: ['combinatorial RI (RI3)'] },
  [[6, 43, 1]]: { name: ['complement of all tri-chord hexachord'] },
  [[6, 43, -1]]: { name: ['complement of all-tri-chord hexachord (inverted form)'] },
  [[6, 44, 1]]: { name: ['Schoenberg Anagram hexachord'] },
  [[6, 44, -1]]: { name: ['quasi raga Bauli'] },
  [[6, 45, 0]]: { name: ['combinatorial RI (RI6)'] },
  [[6, 46, 1]]: {},
  [[6, 46, -1]]: {},
  [[6, 47, 1]]: {},
  [[6, 47, -1]]: { name: ['blues scale'] },
  [[6, 48, 0]]: { name: ['combinatorial RI (RI2)'] },
  [[6, 49, 0]]: { name: ['combinatorial RI (RI4)', 'Prometheus Neapolitan mode'] },
  [[6, 50, 0]]: { name: ['combinatorial RI (RI1)'] },
  [[7, 1, 0]]: { name: ['chromatic heptamirror'] },
  [[7, 2, 1]]: {},
  [[7, 2, -1]]: {},
  [[7, 3, 1]]: {},
  [[7, 3, -1]]: {},
  [[7, 4, 1]]: {},
  [[7, 4, -1]]: {},
  [[7, 5, 1]]: {},
  [[7, 5, -1]]: {},
  [[7, 6, 1]]: {},
  [[7, 6, -1]]: {},
  [[7, 7, 1]]: {},
  [[7, 7, -1]]: {},
  [[7, 8, 0]]: {},
  [[7, 9, 1]]: {},
  [[7, 9, -1]]: {},
  [[7, 10, 1]]: {},
  [[7, 10, -1]]: {},
  [[7, 11, 1]]: {},
  [[7, 11, -1]]: {},
  [[7, 12, 0]]: {},
  [[7, 13, 1]]: {},
  [[7, 13, -1]]: {},
  [[7, 14, 1]]: {},
  [[7, 14, -1]]: {},
  [[7, 15, 0]]: {},
  [[7, 16, 1]]: { name: ["Debussy's heptatonic"] },
  [[7, 16, -1]]: {},
  [[7, 17, 0]]: {},
  [[7, 18, 1]]: {},
  [[7, 18, -1]]: {},
  [[7, 19, 1]]: {},
  [[7, 19, -1]]: {},
  [[7, 20, 1]]: { name: ['chromatic phrygian inverse'] },
  [[7, 20, -1]]: {
    name: [
      'Greek chromatic',
      'chromatic mixolydian',
      'chromatic dorian',
      'quasi raga Pantuvarali',
      'mela Kanakangi',
    ],
  },
  [[7, 21, 1]]: {},
  [[7, 21, -1]]: { name: ['Gypsy (Roma) hepatonic'] },
  [[7, 22, 0]]: {
    name: [
      'double harmonic scale',
      'Persian',
      'major Gypsy (Roma)',
      'Hungarian minor',
      'double harmonic scale',
      'Asian',
      'quasi raga Mayamdavagaula',
    ],
  },
  [[7, 23, 1]]: {},
  [[7, 23, -1]]: { name: ['tritone major heptachord'] },
  [[7, 24, 1]]: {},
  [[7, 24, -1]]: { name: ['mystic heptachord', 'Enigmatic heptatonic'] },
  [[7, 25, 1]]: {},
  [[7, 25, -1]]: {},
  [[7, 26, 1]]: {},
  [[7, 26, -1]]: {},
  [[7, 27, 1]]: {},
  [[7, 27, -1]]: { name: ['modified blues'] },
  [[7, 28, 1]]: {},
  [[7, 28, -1]]: {},
  [[7, 29, 1]]: {},
  [[7, 29, -1]]: {},
  [[7, 30, 1]]: { name: ['Neapolitan-minor mode'] },
  [[7, 30, -1]]: {},
  [[7, 31, 1]]: { name: ['alternating heptachord', 'Hungarian major mode'] },
  [[7, 31, -1]]: { name: ['diminished scale', 'alternating heptachord'] },
  [[7, 32, 1]]: { name: ['harmonic minor scale', 'Spanish Gypsy', 'mela Kiravani'] },
  [[7, 32, -1]]: {
    name: [
      'harmonic major scale',
      'harmonic minor inverse',
      'mela Cakravana',
      'quasi raga Ahir Bhairav',
    ],
  },
  [[7, 33, 0]]: { name: ['Neapolitan-major mode', 'leading-whole-tone mode'] },
  [[7, 34, 0]]: {
    name: [
      'melodic minor ascending scale',
      'jazz minor',
      'augmented thirteenth heptamirror',
      'harmonic/super-locrian',
    ],
  },
  [[7, 35, 0]]: {
    name: [
      'major scale',
      'major diatonic heptachord',
      'natural minor scale',
      'dominant thirteenth',
      'locrian',
      'phrygian',
      'major inverse',
    ],
  },
  [[7, 36, 1]]: {},
  [[7, 36, -1]]: {},
  [[7, 37, 0]]: {},
  [[7, 38, 1]]: {},
  [[7, 38, -1]]: {},
  [[8, 1, 0]]: { name: ['chromatic octamirror'] },
  [[8, 2, 1]]: {},
  [[8, 2, -1]]: {},
  [[8, 3, 0]]: {},
  [[8, 4, 1]]: {},
  [[8, 4, -1]]: {},
  [[8, 5, 1]]: {},
  [[8, 5, -1]]: {},
  [[8, 6, 0]]: {},
  [[8, 7, 0]]: {},
  [[8, 8, 0]]: {},
  [[8, 9, 0]]: { name: ["Messiaen's mode 4"] },
  [[8, 10, 0]]: {},
  [[8, 11, 1]]: {},
  [[8, 11, -1]]: { name: ['blues octatonic'] },
  [[8, 12, 1]]: {},
  [[8, 12, -1]]: {},
  [[8, 13, 1]]: { name: ['blues octatonic'] },
  [[8, 13, -1]]: {},
  [[8, 14, 1]]: {},
  [[8, 14, -1]]: {},
  [[8, 15, 1]]: {},
  [[8, 15, -1]]: {},
  [[8, 16, 1]]: {},
  [[8, 16, -1]]: { name: ['enigmatic octachord'] },
  [[8, 17, 0]]: {},
  [[8, 18, 1]]: {},
  [[8, 18, -1]]: {},
  [[8, 19, 1]]: {},
  [[8, 19, -1]]: {},
  [[8, 20, 0]]: {},
  [[8, 21, 0]]: {},
  [[8, 22, 1]]: {},
  [[8, 22, -1]]: { name: ['Spanish octatonic scale'] },
  [[8, 23, 0]]: { name: ['Greek', 'blues', 'quartal octachord', 'diatonic octad'] },
  [[8, 24, 0]]: {},
  [[8, 25, 0]]: { name: ["Messiaen's mode 6"] },
  [[8, 26, 0]]: { name: ['blues', 'Spanish phrygian'] },
  [[8, 27, 1]]: {},
  [[8, 27, -1]]: {},
  [[8, 28, 0]]: {
    name: [
      'octatonic scale',
      "Messiaen's mode 2",
      'alternating octatonic scale',
      'diminished scale',
    ],
  },
  [[8, 29, 1]]: {},
  [[8, 29, -1]]: {},
  [[9, 1, 0]]: { name: ['chromatic nonamirror'] },
  [[9, 2, 1]]: {},
  [[9, 2, -1]]: {},
  [[9, 3, 1]]: {},
  [[9, 3, -1]]: {},
  [[9, 4, 1]]: {},
  [[9, 4, -1]]: {},
  [[9, 5, 1]]: {},
  [[9, 5, -1]]: {},
  [[9, 6, 0]]: {},
  [[9, 7, 1]]: { name: ['nonatonic blues'] },
  [[9, 7, -1]]: {},
  [[9, 8, 1]]: {},
  [[9, 8, -1]]: {},
  [[9, 9, 0]]: {},
  [[9, 10, 0]]: {},
  [[9, 11, 1]]: {},
  [[9, 11, -1]]: { name: ['diminishing nonachord'] },
  [[9, 12, 0]]: { name: ["Messiaen's mode 3", 'Tsjerepnin'] },
  [[10, 1, 0]]: { name: ['chromatic decamirror'] },
  [[10, 2, 0]]: {},
  [[10, 3, 0]]: {},
  [[10, 4, 0]]: {},
  [[10, 5, 0]]: { name: ['major-minor mixed'] },
  [[10, 6, 0]]: { name: ["Messiaen's mode 7"] },
  [[11, 1, 0]]: { name: ['chromatic undecamirror'] },
  [[12, 1, 0]]: {
    name: ['aggregate', 'dodecachord', 'twelve-tone chromatic', 'chromatic scale', 'dodecamirror'],
  },
};
function forteIndexToInversionsAvailable(card, index) {
  /*
    Return possible inversion values for any cardinality and index

    >>> chord.tables.forteIndexToInversionsAvailable(3,1)
    [0]
    >>> chord.tables.forteIndexToInversionsAvailable(3,2)
    [-1, 1]
    >>> chord.tables.forteIndexToInversionsAvailable(3,3)
    [-1, 1]
    >>> chord.tables.forteIndexToInversionsAvailable(3,6)
    [0]
    */
  var morris;
  if (!_pj.in_es6(card, range(1, 13))) {
    throw new ChordTablesException('cardinality %s not valid' % card);
  }
  if (index < 1 || index > TNMAX[card]) {
    throw new ChordTablesException('index %s not valid' % index);
  }
  morris = FORTE[card][index][2];
  if (morris[1] > 0) {
    return [0];
  } else {
    return [-1, 1];
  }
}
function _validateAddress(address) {
  /*Check that an address is valid

    >>> chord.tables._validateAddress((3, 1, 0))
    (3, 1, 0)
    >>> chord.tables._validateAddress((2, 3))
    (2, 3, 0)
    >>> chord.tables._validateAddress((3, 12, None))
    (3, 12, 0)

    >>> chord.tables._validateAddress((20, 1, 0))
    Traceback (most recent call last):
    music21.chord.tables.ChordTablesException: cardinality 20 not valid

    >>> chord.tables._validateAddress((8, 3000, 0))
    Traceback (most recent call last):
    music21.chord.tables.ChordTablesException: index 3000 not valid

    >>> chord.tables._validateAddress((8, 3, -30))
    Traceback (most recent call last):
    music21.chord.tables.ChordTablesException: inversion -30 not valid
    */
  var card, index, inversion, inversionsAvailable;
  address = Array.isArray(address) ? address : address.toArray();
  card = address[0];
  index = address[1];
  if (address.length >= 3) {
    inversion = address[2];
  } else {
    inversion = null;
  }
  if (!_pj.in_es6(card, range(1, 13))) {
    throw new ChordTablesException('cardinality %s not valid' % card);
  }
  if (index < 1 || index > TNMAX[card]) {
    throw new ChordTablesException('index %s not valid' % index);
  }
  inversionsAvailable = forteIndexToInversionsAvailable(card, index);
  if (inversion !== null) {
    if (!_pj.in_es6(inversion, inversionsAvailable)) {
      console.log('inversionsAvailable', inversionsAvailable);
      console.log('inversion', inversion);
      throw new ChordTablesException('inversion %s not valid' % inversion);
    }
  }
  if (inversion === null) {
    if (_pj.in_es6(0, inversionsAvailable)) {
      inversion = 0;
    } else {
      inversion = 1;
    }
  }
  return [card, index, inversion];
}
function addressToTransposedNormalForm(address) {
  /*Given a TN address, return the normal form transposed to start on 0.

    >>> chord.tables.addressToTransposedNormalForm((3, 1, 0))
    (0, 1, 2)
    >>> chord.tables.addressToTransposedNormalForm((3, 11, -1))
    (0, 4, 7)
    >>> chord.tables.addressToTransposedNormalForm((3, 11, 1))
    (0, 3, 7)
    >>> chord.tables.addressToTransposedNormalForm((3, 11))
    (0, 3, 7)
    >>> chord.tables.addressToTransposedNormalForm((3, 11, None))
    (0, 3, 7)
    */
  var card, index, inversion;
  [card, index, inversion] = _validateAddress(address);
  return SCDICT[card][[index, inversion]][0];
}
function addressToPrimeForm(address) {
  /*Given a TN address, return the normal form

    >>> chord.tables.addressToPrimeForm((3,1,0))
    (0, 1, 2)
    >>> chord.tables.addressToPrimeForm((3,11,-1))
    (0, 3, 7)
    >>> chord.tables.addressToPrimeForm((3,11,1))
    (0, 3, 7)
    >>> chord.tables.addressToPrimeForm((3,11))
    (0, 3, 7)
    >>> chord.tables.addressToPrimeForm((3,11,None))
    (0, 3, 7)
    */
  var card, index, inversion;
  [card, index, inversion] = _validateAddress(address.slice(0, 2));
  return SCDICT[card][[index, inversion]][0];
}
function addressToIntervalVector(address) {
  /*Given a TN address, return the normal form

    >>> chord.tables.addressToIntervalVector((3,1,0))
    (2, 1, 0, 0, 0, 0)
    >>> chord.tables.addressToIntervalVector((3,11,-1))
    (0, 0, 1, 1, 1, 0)
    >>> chord.tables.addressToIntervalVector((3,11,1))
    (0, 0, 1, 1, 1, 0)
    >>> chord.tables.addressToIntervalVector((3,11))
    (0, 0, 1, 1, 1, 0)
    >>> chord.tables.addressToIntervalVector((3,11,None))
    (0, 0, 1, 1, 1, 0)
    */
  var card, index, inversion;
  [card, index, inversion] = _validateAddress(address);
  return SCDICT[card][[index, inversion]][2];
}
function intervalVectorToAddress(vector) {
  /*Given a vector, collect all addresses that match.

    >>> chord.tables.intervalVectorToAddress((7,6,5,4,4,2))
    [ChordTableAddress(cardinality=8, forteClass=1, inversion=None, pcOriginal=None)]
    >>> chord.tables.intervalVectorToAddress((12,12,12,12,12,6))
    [ChordTableAddress(cardinality=12, forteClass=1, inversion=None, pcOriginal=None)]
    >>> chord.tables.intervalVectorToAddress((2,2,3,1,1,1))
    [ChordTableAddress(cardinality=5, forteClass=10, inversion=None, pcOriginal=None)]
    >>> chord.tables.intervalVectorToAddress((1,1,1,1,1,1))
    [ChordTableAddress(cardinality=4, forteClass=15, inversion=None, pcOriginal=None),
    ChordTableAddress(cardinality=4, forteClass=29, inversion=None, pcOriginal=None)]
    */
  var num, post, sc;
  post = [];
  vector = tuple(vector);
  for (var card = 1, _pj_a = 13; card < _pj_a; card += 1) {
    for (
      var item, _pj_d = 0, _pj_b = enumerate(FORTE[card]), _pj_c = _pj_b.length;
      _pj_d < _pj_c;
      _pj_d += 1
    ) {
      item = _pj_b[_pj_d];
      [num, sc] = item;
      if (sc === null) {
        continue;
      }
      if (sc[1] === vector) {
        post.append(new ChordTableAddress(card, num, null, null));
      }
    }
  }
  return post;
}
function addressToZAddress(address) {
  /*Given a TN address, return the address of the z set, if not None

    >>> chord.tables.addressToZAddress((5,12))
    ChordTableAddress(cardinality=5, forteClass=36, inversion=1, pcOriginal=None)
    >>> chord.tables.addressToZAddress((5,36,None))
    ChordTableAddress(cardinality=5, forteClass=12, inversion=0, pcOriginal=None)
    >>> chord.tables.addressToZAddress((5,37))
    ChordTableAddress(cardinality=5, forteClass=17, inversion=0, pcOriginal=None)
    >>> chord.tables.addressToZAddress((8,29))
    ChordTableAddress(cardinality=8, forteClass=15, inversion=1, pcOriginal=None)
    */
  var card, index, unused_inversion, z, zAddress;
  [card, index, unused_inversion] = _validateAddress(address);
  z = FORTE[card][index][3];
  if (z === 0) {
    return null;
  } else {
    zAddress = _validateAddress([card, z, null]);
    return new ChordTableAddress(...zAddress, null);
  }
}
function addressToCommonNames(address) {
  /*
    Given a TN address, return one or more common names if available

    >>> chord.tables.addressToCommonNames((3,1,0))
    ['chromatic trimirror']

    >>> address = chord.tables.ChordTableAddress(3, 11, -1, 2)
    >>> chord.tables.addressToCommonNames(address)
    ['major triad']
    */
  var refDict;
  address = _validateAddress(address);
  refDict = SCREF[address];
  if (_pj.in_es6('name', refDict)) {
    return refDict['name'];
  } else {
    return null;
  }
}
function addressToForteName(address, classification = 'tn') {
  /*Given an address, return the set-class name as a string.

    >>> address = chord.tables.ChordTableAddress(8, 15, 1, 10)
    >>> chord.tables.addressToForteName(address)
    '8-15A'
    >>> chord.tables.addressToForteName((8,15))
    '8-15A'
    >>> chord.tables.addressToForteName((8,15), 'tni')
    '8-15'
    >>> chord.tables.addressToForteName((5,37))
    '5-37'
    */
  var card, iStr, index, inversion;
  [card, index, inversion] = _validateAddress(address);
  if (classification.lower() === 'tn') {
    if (inversion === -1) {
      iStr = 'B';
    } else {
      if (inversion === 1) {
        iStr = 'A';
      } else {
        if (inversion === 0) {
          iStr = '';
        }
      }
    }
  } else {
    iStr = '';
  }
  return '%s-%s%s' % [card, index, iStr];
}
function seekChordTablesAddress(pcSet) {
  /*
    Utility method to return the address to the chord table.

    Table addresses are TN based three character codes:
    cardinality, Forte index number, inversion

    Inversion is either 0 (for symmetrical) or -1/1

    NOTE: time consuming, and only should be run when necessary.

    >>> c1 = chord.Chord(['c3'])
    >>> chord.tables.seekChordTablesAddress(c1)
    ChordTableAddress(cardinality=1, forteClass=1, inversion=0, pcOriginal=0)


    >>> c1 = chord.Chord(
    ...     ['c', 'c#', 'd', 'd#', 'e', 'f', 'f#', 'g', 'g#', 'a', 'b']
    ...     )
    >>> chord.tables.seekChordTablesAddress(c1)
    ChordTableAddress(cardinality=11, forteClass=1, inversion=0, pcOriginal=11)

    >>> c1 = chord.Chord(['g', 'b', 'd'])
    >>> chord.tables.seekChordTablesAddress(c1)
    ChordTableAddress(cardinality=3, forteClass=11, inversion=-1, pcOriginal=7)

    >>> c1 = chord.Chord(['c', 'e-', 'g'])
    >>> chord.tables.seekChordTablesAddress(c1)
    ChordTableAddress(cardinality=3, forteClass=11, inversion=1, pcOriginal=0)

    >>> c1 = chord.Chord(['c', 'c#', 'd#', 'e', 'f#', 'g#', 'a#'])
    >>> chord.tables.seekChordTablesAddress(c1)
    ChordTableAddress(cardinality=7, forteClass=34, inversion=0, pcOriginal=0)

    >>> c1 = chord.Chord(['c', 'c#', 'b'])
    >>> chord.tables.seekChordTablesAddress(c1)
    ChordTableAddress(cardinality=3, forteClass=1, inversion=0, pcOriginal=11)

    Zero-length chords raise a pitch exception:

    >>> c2 = chord.Chord()
    >>> chord.tables.seekChordTablesAddress(c2)
    Traceback (most recent call last):
    music21.chord.tables.ChordTablesException: cannot access chord tables address
    for Chord with 0 pitches
    */
  var candidate,
    candidateInversion,
    candidateOriginalPC,
    candidateTuple,
    card,
    dataLine,
    dataLinePcs,
    index,
    inversion,
    inversionsAvailable,
    match,
    matchedPCOriginal;
  if (!pcSet) {
    throw new ChordTablesException(
      'cannot access chord tables address for Chord with %s pitches' % pcSet.length
    );
  }
  card = pcSet.length;
  if (card === 1) {
    return new ChordTableAddress(1, 1, 0, pcSet[0]);
  } else {
    if (card === 12) {
      return new ChordTableAddress(12, 1, 0, 0);
    }
  }
  const candidates = range(0, card).map((rot) => {
    let testSet = [...pcSet.slice(rot, pcSet.length), ...pcSet.slice(0, rot)];
    const testSetOriginalPC = testSet[0];
    testSet = testSet.map((x) => {
      const res = (x - testSetOriginalPC) % 12;
      return res < 0 ? 12 + res : res;
    });
    let testSetInvert = testSet.map((x) => (12 - x) % 12);
    testSetInvert.reverse();
    testSetInvert = testSetInvert.map((x) => (x + (12 - testSetInvert[0])) % 12);
    return [testSet, testSetInvert, testSetOriginalPC];
  });
  match = false;
  matchedPCOriginal = null;
  for (
    var indexCandidate = 0, _pj_a = FORTE[card].length;
    indexCandidate < _pj_a;
    indexCandidate += 1
  ) {
    dataLine = FORTE[card][indexCandidate];
    if (dataLine === null) {
      continue;
    }
    dataLinePcs = dataLine[0];
    inversionsAvailable = forteIndexToInversionsAvailable(card, indexCandidate);
    for (var item, _pj_d = 0, _pj_b = candidates, _pj_c = _pj_b.length; _pj_d < _pj_c; _pj_d += 1) {
      item = _pj_b[_pj_d];
      [candidate, candidateInversion, candidateOriginalPC] = item;
      if (dataLinePcs.join(' ') === candidate.join(' ')) {
        if (_pj.in_es6(0, inversionsAvailable)) {
          [index, inversion] = [indexCandidate, 0];
        } else {
          [index, inversion] = [indexCandidate, 1];
        }
        matchedPCOriginal = candidateOriginalPC;
        match = true;
        break;
      } else {
        if (dataLinePcs.join(' ') === candidateInversion.join(' ')) {
          if (_pj.in_es6(0, inversionsAvailable)) {
            [index, inversion] = [indexCandidate, 0];
          } else {
            [index, inversion] = [indexCandidate, -1];
          }
          matchedPCOriginal = candidateOriginalPC;
          match = true;
          break;
        }
      }
    }
  }
  if (!match) {
    throw new ChordTablesException('cannot find a chord table address');
  }
  return new ChordTableAddress(card, index, inversion, matchedPCOriginal);
}

const STEPREF = { C: 0, D: 2, E: 4, F: 5, G: 7, A: 9, B: 11 };

const shortNames = {
  'diminished seventh': 'dim7',
  'suspended fourth': 'sus4',
  'dominant seventh': '7',
  'quartal tetramirror': '7sus4'
}


function notesToChordName(notesInput) {
  const chordNotes = typeof notesInput === 'string' ? notesInput.split(' ') : notesInput;
  const pitches = chordNotes.map((noteName) => {
    let pitch = STEPREF[noteName[0]];
    if (noteName.length > 1) {
      if (noteName[1] === '#') pitch += 1;
      else if (noteName[1] === 'b') pitch -= 1;
    }
    if (pitch < 0) pitch = 12;
    return pitch
  });
  pitches.sort();
  const commonNames = addressToCommonNames(seekChordTablesAddress(pitches));
  return commonNames.map(name => `${chordNotes[0]} ${name}`)
}

try {
  window.notesToChordName = notesToChordName;
} catch (error) {
  if (require.main === module) {
    const list = {
      E7sus2: 'E Gb B D',
      A7sus2: 'A B E G',
      B7sus4: 'B E Gb A',
      D7: 'D Gb A C',
      D6: 'D Gb A B',
      Gsus2: 'G A D',
      Asus2: 'A B E',
      Esus4: 'E A B',
      Esus2: 'E Gb B',
      Gmaj7: 'G B D Gb',
      Cmaj9: 'C E G B D',
      'C\E': 'C E G',
      'F#m7b5': 'F# A C E',
      'F#dim': 'F# A C',
      Bm7: 'B D Gb A',
      'D#m(maj9)': 'D# F F# A# D',
    }
    Object.entries(list).forEach(([name, notes]) => {
      try {
        console.log(`${name} - ${notes}: `, notesToChordName(notes))
      } catch (error) {
        console.log(`${name} - ${notes}: NOT FOUND`);
      }
    })
  } else {
    module.exports = {
      notesToChordName,
    }
  }
}


